?legend
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.1"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
border = FALSE) # gives the legend lines the correct color and width
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.1"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
border = FALSE) # gives the legend lines the correct color and width
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.1"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.5) # gives the legend lines the correct color and width
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
nrow(pc.weight.compared)
dim(pc.weight.compared)
dim(pc.weight.compared)
pc.weight.proportion.true<- data.frame(matrix(NA, ncol = 11, nrow = 19))
dim(pc.weight.proportion.true)
for (j in 1:11){
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- pc.weight.compared[1:pairs,j]
pc.weight.proportion.true[i,j+1]<-sum(distance<= threshold)/pairs
pc.weight.proportion.true[i,1]<-pairs
}
}
pc.weight.proportion.true
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(question3.table[,1], question3.table[,2], type = "o", pch = 19, col = "green")
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(theta.proportion.true[,1], theta.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,11], type = "o", pch = 1, col = colours[10])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,12], type = "o", pch = 1, col = colours[11])
dim(pc.weight.proportion.true)
for (j in 1:10){
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- pc.weight.compared[1:pairs,j]
pc.weight.proportion.true[i,j+1]<-sum(distance<= threshold)/pairs
pc.weight.proportion.true[i,1]<-pairs
}
}
pc.weight.proportion.true
dim(pc.weight.compared)
pc.weight.proportion.true<- data.frame(matrix(NA, ncol = 11, nrow = 19))
dim(pc.weight.proportion.true)
for (j in 1:10){
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- pc.weight.compared[1:pairs,j]
pc.weight.proportion.true[i,j+1]<-sum(distance<= threshold)/pairs
pc.weight.proportion.true[i,1]<-pairs
}
}
pc.weight.proportion.true
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(11, alpha = 0.5)
colours
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
colours<- rainbow(11, alpha = 0.5)
colours
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
head(theta.proportion.true)
head(theta.proportion.true, 10)
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
nrow(lac.di.scores.compared)
laci.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
number.of.pairs
laci.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
laci.table
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table[i,2]<-sum(distance<= threshold)/pairs
laci.table[i,1]<-pairs
}
laci.table
nrow(cadh.di.scores.compared)
cadh.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
cadh.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
cadh.table
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table[i,2]<-sum(distance<= threshold)/pairs
cadh.table[i,1]<-pairs
}
cadh.table
colour<- rainbow(3, s = 0.6, v = 0.75)
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], xlim = c(0,1))
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], cadh.table[,2], type = "o", pch = 1, col = colour[3])
legend("topright",
c("DHFR","LACI","CADH"),
lty=c(1,1), pch=c(1,1),
lwd=c(1,1),col=c(colours),
bty = "n", cex = 1.0)
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], cadh.table[,2], type = "o", pch = 1, col = colour[3])
legend("topright",
c("DHFR","LACI","CADH"),
lty=c(1,1), pch=c(1,1),
lwd=c(1,1),col=c(colour),
bty = "n", cex = 1.0)
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
laci.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table2[i,2]<-sum(distance<= threshold)/pairs
laci.table2[i,1]<-pairs
}
laci.table2
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
laci.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table3[i,2]<-sum(distance<= threshold)/pairs
laci.table3[i,1]<-pairs
}
laci.table3
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], laci.table3[,2], type = "o", pch = 1, col = colour[2])
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table3[i,2]<-sum(distance<= threshold)/pairs
cadh.table3[i,1]<-pairs
}
cadh.table3
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table3[,2], type = "o", pch = 1, col = colour[3])
?subset
rep("Blah", 250)
source('~/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/Set up R session.R', echo=TRUE)
names(threshold_selected_cnv_list_plus_all_loc)
sapply(threshold_selected_cnv_list_plus_all_loc, function(x) nrow(x))
sapply(threshold_selected_cnv_list_plus_all_loc, function(x) ncol(x))
colnames(threshold_selected_cnv_list_plus_all_loc)
colnames(threshold_selected_cnv_list_plus_all_loc[[1]])
colnames(threshold_selected_cnv_list_plus_all_loc[[1]][1:11])
sapply(threshold_selected_cnv_list_plus_all_loc, function(x) ncol(x) -10)
immune_cell_infiltrate_annova_per_cancer_list<- readRDS(file = "./R workspaces/immune_cell_infiltrate_annova_per_cancer_list")
head(immune_cell_infiltrate_annova_per_cancer_list[[1]])
length(immune_cell_infiltrate_annova_per_cancer_list)
names(immune_cell_infiltrate_annova_per_cancer_list)
colnames(immune_cell_infiltrate_annova_per_cancer_list[[1]])
dim(immune_cell_infiltrate_annova_per_cancer_list[[1]])
immune_cell_infiltrate_annova_per_cancer_list[[20]][1:10,]
names(immune_cell_infiltrate_annova_per_cancer_list[1])
sapply(immune_cell_infiltrate_annova_per_cancer_list, function(x) x$cancer[1])
immune_cell_infiltrate_annova_per_cancer_list[[20]] %>%
dplyr::filter(target_gene == "CDKN2A") %>%
dplyr::select(number_cat1, number_cat2, number_cat3, number_cat4)
sapply(immune_cell_infiltrate_annova_per_cancer_list, function(x) x$cancer[1])
immune_cell_infiltrate_annova_per_cancer_list[[20]]$cancer<- rep("ALL", nrow(immune_cell_infiltrate_annova_per_cancer_list[[20]]))
immune_cell_infiltrate_annova_per_cancer_list[[20]][1:10,]
immune_cell_infiltrate_annova_per_cancer_table<- do.call(rbind, immune_cell_infiltrate_annova_per_cancer_list[1:19])
dim(immune_cell_infiltrate_annova_per_cancer_list)
dim(immune_cell_infiltrate_annova_per_cancer_table)
unique(immune_cell_infiltrate_annova_per_cancer_table$cancer)
immune_cell_types<- unique(immune_cell_infiltrate_annova_per_cancer_table$cell_type)
length(immune_cell_types)
immune_cell_types
immune_cell_infiltrate_annova_per_cell_type_list<- vector("list", length(immune_cell_types))
immune_cell_infiltrate_annova_per_cell_type_list
for (i in 1: length(immune_cell_types)){
immune_cell_infiltrate_annova_per_cell_type_list[[i]]<- immune_cell_infiltrate_annova_per_cancer_table %>%
dplyr::filter(cell_type == immune_cell_types[i])
}
for (i in 1: length(immune_cell_infiltrate_annova_per_cell_type_list)){
immune_table<- immune_cell_infiltrate_annova_per_cell_type_list[[i]]
immune_table$BH_adjust_ANOVA<- p.adjust(immune_table$ANOVA_p_value, method = "BH")
immune_table$BH_adjust_cat2_1<- p.adjust(immune_table$p_value_cat2_1, method = "BH")
immune_table$BH_adjust_cat3_1<- p.adjust(immune_table$p_value3_1, method = "BH")
immune_table$BH_adjust_cat4_1<- p.adjust(immune_table$p_value4_1, method = "BH")
immune_table$BH_adjust_cat3_2<- p.adjust(immune_table$p_value3_2, method = "BH")
immune_table$BH_adjust_cat4_2<- p.adjust(immune_table$p_value4_2, method = "BH")
immune_table$BH_adjust_Cat4_3<- p.adjust(immune_table$p_value4_3, method = "BH")
immune_table<- dplyr::arrange(immune_table, BH_adjust_cat2_1)
immune_cell_infiltrate_annova_per_cell_type_list[[i]]<- immune_table
}
immune_cell_infiltrate_annova_per_cancer_all_table<- immune_cell_infiltrate_annova_per_cancer_list[[20]]
dim(immune_cell_infiltrate_annova_per_cancer_all_table)
immune_cell_types<- unique(immune_cell_infiltrate_annova_per_cancer_all_table$cell_type)
length(immune_cell_types)
immune_cell_types
immune_cell_infiltrate_annova_per_cell_type_all_list<- vector("list", length(immune_cell_types))
immune_cell_infiltrate_annova_per_cell_type_all_list
for (i in 1: length(immune_cell_types)){
immune_cell_infiltrate_annova_per_cell_type_all_list[[i]]<- immune_cell_infiltrate_annova_per_cancer_all_table %>%
dplyr::filter(cell_type == immune_cell_types[i])
}
length(immune_cell_infiltrate_annova_per_cell_type_all_list)
dim(immune_cell_infiltrate_annova_per_cell_type_all_list[[1]])
for (i in 1: length(immune_cell_infiltrate_annova_per_cell_type_list)){
immune_table<- immune_cell_infiltrate_annova_per_cell_type_all_list[[i]]
immune_table$BH_adjust_ANOVA<- p.adjust(immune_table$ANOVA_p_value, method = "BH")
immune_table$BH_adjust_cat2_1<- p.adjust(immune_table$p_value_cat2_1, method = "BH")
immune_table$BH_adjust_cat3_1<- p.adjust(immune_table$p_value3_1, method = "BH")
immune_table$BH_adjust_cat4_1<- p.adjust(immune_table$p_value4_1, method = "BH")
immune_table$BH_adjust_cat3_2<- p.adjust(immune_table$p_value3_2, method = "BH")
immune_table$BH_adjust_cat4_2<- p.adjust(immune_table$p_value4_2, method = "BH")
immune_table$BH_adjust_Cat4_3<- p.adjust(immune_table$p_value4_3, method = "BH")
immune_table<- dplyr::arrange(immune_table, BH_adjust_cat2_1)
immune_cell_infiltrate_annova_per_cell_type_all_list[[i]]<- immune_table
}
unique(immune_cell_infiltrate_annova_per_cell_type_list[[1]]$cancer)
dim(immune_cell_infiltrate_annova_per_cell_type_list[[1]])
dim(immune_cell_infiltrate_annova_per_cell_type_all_list[[1]])
for (i in 1: length(immune_cell_infiltrate_annova_per_cell_type_list)) {
immune_cell_infiltrate_annova_per_cell_type_list[[i]]<- rbind(immune_cell_infiltrate_annova_per_cell_type_list[[i]],
immune_cell_infiltrate_annova_per_cell_type_all_list[[i]])
}
dim(immune_cell_infiltrate_annova_per_cell_type_list[[1]])
unique(immune_cell_infiltrate_annova_per_cell_type_list[[1]]$cancer)
sapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) unique(x$cell_type))
lapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) unique(x$cancer))
sapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) unique(x$cell_type))
colnames(immune_cell_infiltrate_annova_per_cell_type_list[[1]])
sapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) sum(x$BH_adjust_cat2_1 <= 0.05, na.rm = TRUE))
sapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) sum(x$BH_adjust_cat2_1 <= 0.1, na.rm = TRUE))
sapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) sum(x$BH_adjust_cat2_1 <= 0.1 & x$number_cat1 >= 20 & x$number_cat2 >= 20, na.rm = TRUE))
input_table = immune_cell_infiltrate_annova_per_cell_type_list[[1]]
p_value = 0.05
significant_selection<- function(input_table, p_value){
output_table<- input_table %>%
#dplyr::filter(as.name(filter1) <= p_value) %>%
dplyr::filter(BH_adjust_cat2_1 <= p_value) %>%
dplyr::filter(number_cat1 >= 20 & number_cat2 >= 20) %>%
dplyr::arrange(BH_adjust_cat2_1)
}
immune_cell_infiltrate_annova_per_cell_type_significant_list<- lapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) significant_selection(x, 0.1))
sapply(immune_cell_infiltrate_annova_per_cell_type_significant_list, function(x) nrow(x))
sapply(immune_cell_infiltrate_annova_per_cell_type_list, function(x) unique(x$cell_type))
sapply(immune_cell_infiltrate_annova_per_cell_type_significant_list, function(x) unique(x$cancer))
immune_cell_infiltrate_annova_per_cell_type_significant_table<- do.call(rbind, immune_cell_infiltrate_annova_per_cell_type_significant_list)
immune_cell_infiltrate_annova_per_cell_type_significant_table<- immune_cell_infiltrate_annova_per_cell_type_significant_table %>%
dplyr::arrange(cancer, target_gene, cell_type, BH_adjust_cat2_1)
head(immune_cell_infiltrate_annova_per_cell_type_significant_table)
immune_cell_infiltrate_annova_per_cell_type_significant_table<- immune_cell_infiltrate_annova_per_cell_type_significant_table %>%
dplyr::arrange(cell_type, cancer, target_gene, BH_adjust_cat2_1)
head(immune_cell_infiltrate_annova_per_cell_type_significant_table)
immune_cell_infiltrate_signif<- read.csv("../../Output/Immune_Infiltration/immune_cell_infiltrate_annova_per_cell_type_significant_table_p0_1_greather_than_20.csv", header = TRUE, stringsAsFactors = FALSE)
immune_cell_infiltrate_signif
df<- immune_cell_infiltrate_signif %>%
dplyr::select(cell_type, mean_cibersort_cat1, mean_cibersort_cat2)
df3<- cbind(df[,1:2], rep("cat_1", nrow(df)))
df4<- cbind(df[,c(1,3)], rep("cat_2", nrow(df)))
colnames(df3)<- c("cell_type", "mean_CIBERSORT", "category")
colnames(df4)<- c("cell_type", "mean_CIBERSORT", "category")
df2<-rbind(df3, df4)
p <- ggplot(df, aes(cell_type, mean_cibersort_cat1))
p + geom_boxplot()
p + geom_boxplot() + geom_jitter(width = 0.2)
ggplot(df2, aes(cell_type, mean_CIBERSORT)) +
geom_boxplot(aes(group = category))
ggplot(aes(y = mean_CIBERSORT, x = cell_type, fill = category), data = df2) +
geom_boxplot() +
geom_jitter(width = 0.5) +
theme(legend.position="bottom") +
xlab("Immune cell type") +
ylab("CIBERSORT value") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5, size = 10))
ggplot(aes(y = mean_CIBERSORT, x = cell_type, fill=factor(category,labels=c("Single deletion","Co-deletion"))), data = df2) +
geom_boxplot() +
geom_jitter(width = 0.5) +
theme(legend.position="bottom") +
xlab("Immune cell type") +
ylab("CIBERSORT value") +
labs(fill="Deletion category") #+
ggplot(aes(y = mean_CIBERSORT, x = cell_type, fill=factor(category,labels=c("Single deletion","Co-deletion"))), data = df2) +
geom_boxplot() #+
ggplot(aes(y = mean_CIBERSORT, x = cell_type, fill=factor(category,labels=c("Single deletion","Co-deletion"))), data = df2) +
geom_boxplot() +
#geom_jitter(width = 0.5) +
theme(legend.position="bottom") +
xlab("Immune cell type") +
ylab("CIBERSORT value") +
labs(fill="Deletion category") #+
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5, size = 10))
ggplot(aes(y = mean_CIBERSORT, x = cell_type, fill=factor(category,labels=c("Single deletion","Co-deletion"))), data = df2) +
geom_boxplot() +
#geom_jitter(width = 0.5) +
theme(legend.position="bottom") +
xlab("Immune cell type") +
ylab("CIBERSORT value") +
labs(fill="Deletion category") #+
ggsave("box_immune_infiltration.tiff",width = 12, height = 8, dpi = 300)
