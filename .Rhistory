heatmap.matrix.cytoband.del[,i]<- cytoband.list[[2]]$proportion.of.deletions
#print(cancer.type[i])
}
#head(heatmap.matrix.cytoband.del)
##Final column contains all cancer types:
##Create one large dataframe with all CNV data in it:
#x<-join.cnv.datasets(cnv.list, 4)
##Calculate proportion of deletions per cytoband and add to matrix
x<- dplyr::full_join(acc.cnv.chr.location[,1:8],CNV.all.table, by = "Locus.ID")
cytoband.list<- events.per.cytoband(x, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
heatmap.matrix.cytoband.del[,38]<- cytoband.list[[2]]$proportion.of.deletions
}
system.time(old.function())
output=foreach(i = CNV.data) %dopar% {
i[,1:3]
}
output=foreach(i = CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],i, by = "Locus.ID") }
output=vector(length=38)
output
output=foreach(i = CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],i, by = "Locus.ID")}
library(tidyr)
library(dplyr)
i= CNV.data[[1]]
dplyr::full_join(acc.cnv[,1:8],i, by = "Locus.ID")
library(parallel)
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
new.function<- function(x,y){
z<- dplyr::full_join(y[,1:8],x, by = "Locus.ID")
cytoband.list<- events.per.cytoband(z, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(cytoband.list[[2]]$proportion.of.deletions)
}
library(parallel)
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv.chr.location")
?clusterEvalQ
clusterExport(cl, "acc.cnv")
clusterEvalQ(cl, library(dplyr), library(tidyr))
clusterEvalQ(cl, library(dplyr))
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
clusterExport(cl, "new.function")
clusterEvalQ(cl, library(dplyr))
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
length(test5)
head(test5[[1]])
test6<- do.call(cbind, test5) %>%as.matrix
rownames(test6)<- cytoband.list[[2]]$cytoband
colnames(test6)<- c(cancer.type, "ALL")
pheatmap(test6,
cluster_row = F,
cluster_cols = F,
show_rownames = TRUE,
show_colnames = TRUE,
color = col.pal,
fontsize_row=1,
#cellwidth = 10,
annotation_row = annotation_row,
annotation_legend = FALSE
)
col.pal<- colorRampPalette(c( "white","navy", "firebrick3"))(1000)
pheatmap(test6,
cluster_row = F,
cluster_cols = F,
show_rownames = TRUE,
show_colnames = TRUE,
color = col.pal,
fontsize_row=1,
#cellwidth = 10,
annotation_row = annotation_row,
annotation_legend = FALSE
)
annotation_row<- data.frame(chromosome = cytoband.list[[2]]$chromosome)
rownames(annotation_row)<- cytoband.list[[2]]$cytoband
pheatmap(test6,
cluster_row = F,
cluster_cols = F,
show_rownames = TRUE,
show_colnames = TRUE,
color = col.pal,
fontsize_row=1,
#cellwidth = 10,
#annotation_row = annotation_row,
#annotation_legend = FALSE
)
output=vector(length=38)
output=foreach(i = CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],i, by = "Locus.ID")}
output=foreach(i = CNV.data) %dopar% {
acc.cnv[,1:8]}
output[[1]]
output=vector(length=38)
output=foreach(i = CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],acc.cnv[,1:3], by = "Locus.ID")}
output[[1]]
output=foreach(i = CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],i[[i]], by = "Locus.ID")}
output=foreach(i = CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],i, by = "Locus.ID")}
output=vector(length=38)
output=vector(length=38)
output=foreach(i = 1:38) %dopar% {
dplyr::full_join(acc.cnv[,1:8],CNV.data[[i]], by = "Locus.ID")}
no_cores<-8
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
stopCluster(cl)
stopCluster(cl)
options(cores = 7)
registerDoMC()
output=vector(length=38)
output=foreach(CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8], by = "Locus.ID")}
output=vector(length=38)
output=foreach(CNV.data) %dopar% {
dplyr::full_join(acc.cnv[,1:8],CNV.data, by = "Locus.ID")}
output=vector(length=38)
output=foreach(i=CNV.data) %dopar% {
i %>% dplyr::full_join(acc.cnv[,1:8],., by = "Locus.ID")}
i
test5=vector(length=38)
no_cores<- 4
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
new.function<- function(x,y){
dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions)
}
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
new.function<- function(x,y){
dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions)
}
new.function2<- function(x,y){
dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions)
}
library(parallel)
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function2")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
warnings()
stopCluster(cl)
new.function2<- function(x,y){
x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions)
}
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function2")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
stopCluster(cl)
stopCluster(cl)
?system.time
system.time({
doors <- 1:3
runs <- 1e2
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})[3]
system.time({
doors <- 1:3
runs <- 1e2
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})
system.time({
doors <- 1:3
runs <- 1e2
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})
system.time({
doors <- 1:3
runs <- 1e2
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})
system.time({
doors <- 1:3
runs <- 1e2
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})
system.time({
doors <- 1:3
runs <- 1e6
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})
system.time({
doors <- 1:3
runs <- 1e6
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})[3]
avg
Sys.info()[1]
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
onerun <- function(.){ # Function of no arguments
doors <- 1:3
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice==prize.door) return(0) else return(1) # Always switch
}
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
run2 <- rbind(c(MontyHall(1e6, cores=4), "cores"=4))
run3 <- rbind(c(MontyHall(1e6, cores=8), "cores"=8))
rbind(run1, run2, run3)
new.function<- function(x,y){
z<- dplyr::full_join(y[,1:8],x, by = "Locus.ID")
cytoband.list<- events.per.cytoband(z, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(cytoband.list[[2]]$proportion.of.deletions)
}
system.time(test7 <- mclapply(x=CNV.data, FUN=new.function(x, acc.cnv), mc.cores=4))
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function(x, acc.cnv), mc.cores=4))
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function(X, acc.cnv), mc.cores=4))
new.function<- function(x){
z<- dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID")
cytoband.list<- events.per.cytoband(z, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(cytoband.list[[2]]$proportion.of.deletions)
}
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function(x, acc.cnv), mc.cores=4))
new.function<- function(x){
z<- dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID")
cytoband.list<- events.per.cytoband(z, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(cytoband.list[[2]]$proportion.of.deletions)
}
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function, mc.cores=4))
new.function3<- function(x){
dplyr::full_join(acc.cnv[,1:8],. , by = "Locus.ID") %>%
events.per.cytoband(threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.$proportion.of.deletions)
}
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function3, mc.cores=4))
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function, mc.cores=8))
new.function3<- function(x){
x %>% dplyr::full_join(acc.cnv[,1:8],. , by = "Locus.ID") %>%
events.per.cytoband(threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.$proportion.of.deletions)
}
new.function3<- function(x){
x %>% dplyr::full_join(acc.cnv[,1:8],. , by = "Locus.ID") %>%
events.per.cytoband(threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.$proportion.of.deletions)
}
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function3, mc.cores=4))
new.function3<- function(x){
dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID") %>%
events.per.cytoband(threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.$proportion.of.deletions)
}
new.function3<- function(x){
dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID") %>%
events.per.cytoband(threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions)
}
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function3, mc.cores=4))
system.time(test7 <- mclapply(X=CNV.data, FUN=new.function, mc.cores=19))
test8<- mclapply(X=CNV.data, FUN=dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID"), mc.cores=4)
test8<- mclapply(X=CNV.data, FUN=function(x) dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID"), mc.cores=4)
new.function4<-function(x) {dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID")}
test8<- mclapply(CNV.data, new.function4, mc.cores=4)
new.function4<-function(x) {dplyr::full_join(acc.cnv[,1:8],x, by = "Locus.ID")}
no_cores<- 4
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function2")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
new.function2<- function(x,y){
z<- x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(z[[2]]$proportion.of.deletions)
}
no_cores<- 4
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function2")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
new.function2<- function(x,y){
z<- x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(z[[2]]$proportion.of.deletions)
}
new.function2<- function(x,y){
z<- x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(z[[2]]$proportion.of.deletions)
}
library(parallel)
no_cores <- detectCores() - 1
no_cores
no_cores<- 4
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function2")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
new.function<- function(x,y){
z<- dplyr::full_join(y[,1:8],x, by = "Locus.ID")
cytoband.list<- events.per.cytoband(z, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(cytoband.list[[2]]$proportion.of.deletions)
}
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function(x, acc.cnv)}))
new.function<- function(x,y){
z<- dplyr::full_join(y[,1:8],x, by = "Locus.ID")
cytoband.list<- events.per.cytoband(z, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(cytoband.list[[2]]$proportion.of.deletions)
}
new.function6<- function(x,y){
dplyr::full_join(y[,1:8],x, by = "Locus.ID")
}
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function6(x, acc.cnv)}))
new.function6<- function(x,y){
dplyr::full_join(y[,1:8],x, by = "Locus.ID")
}
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function")
clusterExport(cl, "new.function2")
clusterExport(cl, "new.function6")
clusterExport(cl, "new.function7")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function6(x, acc.cnv)}))
new.function7<- function(x){
events.per.cytoband(x, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions))
}
new.function7<- function(x){
events.per.cytoband(x, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE) %>%
return(.[[2]]$proportion.of.deletions)
}
clusterExport(cl, "new.function7")
system.time(test5<- parLapply(cl, test5, function(x) {new.function7(x)}))
new.function7<- function(x){
z<- events.per.cytoband(x, threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(z[[2]]$proportion.of.deletions)
}
clusterExport(cl, "new.function7")
system.time(test5<- parLapply(cl, test5, function(x) {new.function7(x)}))
stopCluster(cl)
new.function2<- function(x,y){
z<- x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(z[[2]]$proportion.of.deletions)
}
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function")
clusterExport(cl, "new.function2")
clusterExport(cl, "new.function6")
clusterExport(cl, "new.function7")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
new.function2<- function(x,y){
z<- x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(z[[2]]$proportion.of.deletions)
}
new.function2<- function(x,y){
z<- x %>% dplyr::full_join(y[,1:8],., by = "Locus.ID") %>%
events.per.cytoband(., threshold = -1, cytoband_column = 10, column_data_start = 11, chromosome_interval = 0,  deletion = TRUE)
return(z[[2]]$proportion.of.deletions)
}
no_cores<- 4
cl <- makeCluster(no_cores)
cl
clusterExport(cl, "acc.cnv")
clusterExport(cl, "new.function")
clusterExport(cl, "new.function2")
clusterExport(cl, "new.function6")
clusterExport(cl, "new.function7")
clusterExport(cl, "events.per.cytoband")
clusterEvalQ(cl, library(dplyr))
test5=vector(length=38)
system.time(test5<- parLapply(cl, CNV.data, function(x) {new.function2(x, acc.cnv)}))
system.time(test5<- lapply(CNV.data, function(x) {new.function2(x, acc.cnv.chr.location)}))
system.time(test5<- lapply(CNV.data, function(x) {new.function2(x, acc.cnv)}))
system.time({
doors <- 1:3
runs <- 1e6
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})[3]
