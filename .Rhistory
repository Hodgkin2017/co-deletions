dplyr::mutate(proportion.of.deletions = sum.of.genes.deleted/total.number.of.events) %>%
tidyr::separate(cytoband, c("chromosome", "band"), sep = "[p:q]", remove = FALSE, convert = TRUE) %>%
dplyr::arrange(cytoband)
#dplyr::select(-band) %>%
#results[[2]]$chromosome<- as.integer(results[[2]]$chromosome)
#results[[2]]<- dplyr::arrange(results[[2]], chromosome, cytoband)
results
}##Move this once I have finished the second part
test2<- events.per.cytoband(acc.cnv, threshold, cytoband_column, column_data_start, chromosome_interval = 0,  deletion = TRUE)
test3<- test2[[2]]
test3
events.per.cytoband<- function(x, threshold, cytoband_column, column_data_start, chromosome_interval = 0,  deletion = TRUE){
##########
## Obtain chromosomal locations of genes
keys<- keys(org.Hs.eg.db, keytype = "ENTREZID")
columns<- c("CHR", "CHRLOC", "CHRLOCEND")
all.gene.locations<- AnnotationDbi::select(org.Hs.eg.db, keys, columns, keytype = "ENTREZID")
locus.id<- x$Locus.ID
genes.of.interest<- all.gene.locations[all.gene.locations$ENTREZID %in% locus.id,]
genes.of.interest<- na.omit(genes.of.interest[!duplicated(genes.of.interest$ENTREZID), ])
## Remove genes with poorly defined chromosome
chr<-c(seq(1:22), "X", "Y")
rows.of.interest<- which(genes.of.interest$CHR %in% chr)
genes.of.interest<- genes.of.interest[rows.of.interest,]
genes.of.interest$strand<- ifelse(genes.of.interest$CHRLOC <0, "-", "+")
genes.of.interest$start<- abs(genes.of.interest$CHRLOC)
genes.of.interest$end<- abs(genes.of.interest$CHRLOCEND)
##Join gene location dataframe to original CNV data table
genes.of.interest<- dplyr::rename(genes.of.interest, Locus.ID = ENTREZID)
genes.of.interest$Locus.ID<- as.integer(genes.of.interest$Locus.ID)
genes.of.interest<- full_join(genes.of.interest,x, by="Locus.ID")
##Order genes by chromosome and location:
genes.of.interest<- dplyr::arrange(genes.of.interest, CHR, start)
##Remove genes without chromosomal locations:
#genes.of.interest<- genes.of.interest[!is.na(genes.of.interest$CHRLOC)]
#which(is.na(genes.of.interest), arr.ind = TRUE)
column_data_start<- column_data_start + 7
cytoband_column<- cytoband_column + 7
## Code to get proportion of deletions per cytoband
cnv.matrix<- as.matrix(genes.of.interest[,column_data_start:ncol(genes.of.interest)])
if (deletion == TRUE) {
cnv.matrix<- ifelse(cnv.matrix <= threshold, 1, 0)
} else {
cnv.matrix<- ifelse(cnv.matrix >= threshold, 1, 0)
}
results <- vector("list", 2)
results[[1]]<- cnv.matrix %>%
as.data.frame() %>%
dplyr::mutate(sum.of.deletions = rowSums(.)) %>%
dplyr::mutate(number.of.tumours = ncol(.)-1) %>%
cbind(cytoband=genes.of.interest[,cytoband_column], chromosome = as.integer(genes.of.interest$CHR) , start = genes.of.interest$start, .)
results[[2]]<- results[[1]]%>%
group_by(cytoband) %>%
dplyr::summarise(sum.of.genes.deleted = sum(sum.of.deletions),
total.number.of.genes=n(),
total.number.of.events = sum(number.of.tumours)) %>%
dplyr::mutate(proportion.of.deletions = sum.of.genes.deleted/total.number.of.events) %>%
tidyr::separate(cytoband, c("chromosome", "band"), sep = "[p:q]", remove = FALSE, convert = TRUE)
#dplyr::select(-band) %>%
results[[2]]$chromosome<- as.integer(results[[2]]$chromosome)
results[[2]]<- dplyr::arrange(results[[2]], chromosome, cytoband)
results
}##Move this once I have finished the second part
test2<- events.per.cytoband(acc.cnv, threshold, cytoband_column, column_data_start, chromosome_interval = 0,  deletion = TRUE)
test3<- test2[[2]]
test3
class(test3$chromosome)
View(test3)
View(test3)
which(max(test3$proportion.of.deletions))
max(test3$proportion.of.deletions)
grep(test3$proportion.of.deletions, max(test3$proportion.of.deletions))
which(test3$proportion.of.deletions == 0.06825397)
?max
head(sort(test3$proportion.of.deletions,TRUE),10)
test3 %>%
arrange(proportion.of.deletions) %>%
head(n=5)
test3 %>%
arrange(proportion.of.deletions) %>%
head()
test3 %>%
arrange(proportion.of.deletions) %>%
head()
test3 %>%
arrange(proportion.of.deletions) %>%
head()
test3 %>%
arrange(desc(proportion.of.deletions) %>%
head()
## Finding chromosome names:
#grep("^1", test$cytoband)
#grepl("^1", test$cytoband)
#dplyr::filter(test, cytoband "^1"==TRUE)
#dplyr::filter(test, grepl("^1", test$cytoband))tid
#rowSums(cnv.matrix)
#############
#### Code to get proportion of deletions per unit size of chromosome:
seq.test<- seq(1:100)
table(cut(seq.test, 10, labels = seq(1:10)))
test3 %>%
arrange(desc(proportion.of.deletions)) %>%
head()
head(results[[1]])
head(test2[[1]])
test2[[1]] %>%
group_by(chromosome) %>%
summarise(range = range(start))
test2[[1]] %>%
group_by(chromosome) %>%
summarise(min = min(start),
max = max(start))
results[[3]]<-test2[[1]] %>%
group_by(chromosome) %>%
summarise(chromosome_start = min(start),
chromosome_end = max(start)) %>%
mutate(estimated_chromosome_length = chromosome_end - chromosome_start)
test2[[1]] %>%
group_by(chromosome) %>%
summarise(chromosome_start = min(start),
chromosome_end = max(start)) %>%
mutate(estimated_chromosome_length = chromosome_end - chromosome_start)
test2[[1]] %>%
group_by(chromosome) %>%
summarise(chromosome_start = min(start),
chromosome_end = max(start)) %>%
mutate(estimated_chromosome_length = chromosome_end - chromosome_start,
mutate(intervals_for_kb = estimated_chromosome_length/1000)
head()
test2[[1]] %>%
group_by(chromosome) %>%
summarise(chromosome_start = min(start),
chromosome_end = max(start)) %>%
mutate(estimated_chromosome_length = chromosome_end - chromosome_start,
intervals_for_kb = estimated_chromosome_length/1000)
test2[[1]] %>%
group_by(chromosome) %>%
summarise(chromosome_start = min(start),
chromosome_end = max(start)) %>%
mutate(estimated_chromosome_length = chromosome_end - chromosome_start,
intervals_for_kb = estimated_chromosome_length/1000,
intervals_for_10kb = estimated_chromosome_length/10000,
intervals_for_100kb = estimated_chromosome_length/100000,
intervals_for_Mb = estimated_chromosome_length/1000000,
intervals_for_10Mb = estimated_chromosome_length/10000000)
test2[[1]]$start %>%
cut(seq.test, 10, labels = seq(1:10))
(seq.test, 10, labels = seq(1:10)
seq.test, 10, labels = seq(1:10)
seq.test, 10, labels = seq(1:10)
table(cut(seq.test, 10, labels = seq(1:10)))
cut(seq.test, 10, labels = seq(1:10))
test2[[1]]$start %>%
cut(10, labels = seq(1:10))
cut.table<- test2[[1]]$start %>%
cut(10, labels = seq(1:10))
cut.table<- test2[[1]]$start %>%
cut(10, labels = seq(1:10)) %>%
as.dataframe()
cut.table<- test2[[1]]$start %>%
cut(10, labels = seq(1:10)) %>%
as.dataframe(.)
cut.table<- test2[[1]]$start %>%
cut(10, labels = seq(1:10)) %>%
dataframe(.)
cut.table<- test2[[1]]$start %>%
cut(10, labels = seq(1:10)) %>%
matrix(ncol=1)
View(cut.table)
cut.table<- test2[[1]]$start %>%
cut(10, labels = seq(1:10)) %>%
matrix(ncol=1) %>%
cbind(cut = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
colnames(test2[[1]])
chromosome_interval<- 241.7490
select_chromosome<- 2
chromosome_interval
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) #%>%
cut.table
View(cut.table)
dim(cut.table
)
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
chromosome_interval<- 242
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
chromosome_interval
class(chromosome_interval)
seq.test<- seq(1:10000)
table(cut(seq.test, 10, labels = seq(1:10)))
chromosome_interval
table(cut(seq.test, 242, labels = seq(1:10)))
table(cut(seq.test, 242, labels = seq(1:242)))
table(cut(seq.test, chromosome_interval, labels = seq(1:242)))
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
cut(., chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
table(cut(seq.test, chromosome_interval, labels = seq(1:chromosome_interval)))
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
cut(242, chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
.$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
dplyr::select(start) %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
dplyr::select(start) #%>%
head(cut.table)
class(cut.table)
?cut
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
as.vector(dplyr::select(start)) #%>%
class(cut.table)
as.vector(cut.table)
as.vector(cut.table)
class(as.vector(cut.table))
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
.$start #%>%
class(cut.table)
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
.$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., chr= test2[[1]]$chromosome, start= test2[[1]]$start)
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
.$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) #%>%
cut.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome) %>%
.$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) #%>%
length(cut.table)
length(test2[[1]]$chromosome)
filter.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome)
filter.table$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) #%>%
filter.table<- test2[[1]] %>%
dplyr::filter(chromosome == select_chromosome)
cut.table<- filter.table$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) #%>%
View(filter.table)
cut.table<- filter.table$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) #%>%
cut.table<- filter.table$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., filter.table)
chromosome_interval
keys<- keys(org.Hs.eg.db, keytype = "ENTREZID")
columns<- c("CHR", "CHRLOC", "CHRLOCEND")
all.gene.locations<- AnnotationDbi::select(org.Hs.eg.db, keys, columns, keytype = "ENTREZID")
locus.id<- x$Locus.ID
genes.of.interest<- all.gene.locations[all.gene.locations$ENTREZID %in% locus.id,]
genes.of.interest<- na.omit(genes.of.interest[!duplicated(genes.of.interest$ENTREZID), ])
chr<-c(seq(1:22), "X", "Y")
rows.of.interest<- which(genes.of.interest$CHR %in% chr)
genes.of.interest<- genes.of.interest[rows.of.interest,]
genes.of.interest$strand<- ifelse(genes.of.interest$CHRLOC <0, "-", "+")
genes.of.interest$start<- abs(genes.of.interest$CHRLOC)
genes.of.interest$end<- abs(genes.of.interest$CHRLOCEND)
genes.of.interest<- dplyr::rename(genes.of.interest, Locus.ID = ENTREZID)
genes.of.interest$Locus.ID<- as.integer(genes.of.interest$Locus.ID)
genes.of.interest<- full_join(genes.of.interest,x, by="Locus.ID")
genes.of.interest<- dplyr::arrange(genes.of.interest, CHR, start)
column_data_start<- column_data_start + 7
cytoband_column<- cytoband_column + 7
cnv.matrix<- as.matrix(genes.of.interest[,column_data_start:ncol(genes.of.interest)])
if (deletion == TRUE) {
cnv.matrix<- ifelse(cnv.matrix <= threshold, 1, 0)
} else {
cnv.matrix<- ifelse(cnv.matrix >= threshold, 1, 0)
}
results <- vector("list", 2)
cut.table<- filter.table$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., filter.table) %>%
dplyr::group_by(Intervals) %>%
dplyr::summarise(sum.of.genes.deleted = sum(sum.of.deletions),
total.number.of.genes=n(),
total.number.of.potential.events = sum(number.of.tumours)) %>%
dplyr::mutate(proportion.of.deletions = sum.of.genes.deleted/total.number.of.potential.events)
cut.table
which(acc.cnv%in% "C1orf70", arr.ind = TRUE)
which(acc.cnv$Gene.Symbol %in% "C1orf70", arr.ind = TRUE)
which(acc.cnv$Gene.Symbol %in% "TMEM240", arr.ind = TRUE)
which(acc.cnv$Locus.ID %in% 339453, arr.ind = TRUE)
which(acc.cnv$Gene.Symbol %in% "TMEM240", arr.ind = TRUE)
acc.cnv[68,]
which(acc.cnv$Gene.Symbol %in% "SCA21", arr.ind = TRUE)
which(acc.cnv$Gene.Symbol %in% "C1orf70", arr.ind = TRUE)
acc.cnv[68,]
library(parallel)
system.time({
doors <- 1:3
runs <- 1e6
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})[3]
onerun <- function(.){ # Function of no arguments
doors <- 1:3
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice==prize.door) return(0) else return(1) # Always switch
}
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
run2 <- rbind(c(MontyHall(1e6, cores=4), "cores"=4))
run3 <- rbind(c(MontyHall(1e6, cores=8), "cores"=8))
rbind(run1, run2, run3)
library(parallel)
version
library(parallel)
system.time({
doors <- 1:3
runs <- 1e6
game.outputs <- numeric(runs)
for (run in 1:runs){
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice!=prize.door) game.outputs[run] <- 1 # Always switch
}
avg <- mean(game.outputs)
})[3]
avg
onerun <- function(.){ # Function of no arguments
doors <- 1:3
prize.door <- sample(doors, size=1)
choice <- sample(doors, size=1)
if (choice==prize.door) return(0) else return(1) # Always switch
}
MontyHall <- function(runs, cores=detectCores()){
require(parallel)
# clusterApply() for Windows
if (Sys.info()[1] == "Windows"){
cl <- makeCluster(cores)
runtime <- system.time({
avg <- mean(unlist(clusterApply(cl=cl, x=1:runs, fun=onerun)))
})[3]
stopCluster(cl) # Don't forget to do this--I frequently do
# mclapply() for everybody else
} else {
runtime <- system.time({
avg <- mean(unlist(mclapply(X=1:runs, FUN=onerun, mc.cores=cores)))
})[3]
}
return(list(avg=avg, runtime=runtime))
}
run1 <- rbind(c(MontyHall(1e6, cores=1), "cores"=1))
run2 <- rbind(c(MontyHall(1e6, cores=4), "cores"=4))
run3 <- rbind(c(MontyHall(1e6, cores=8), "cores"=8))
rbind(run1, run2, run3)
source('~/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/Set up R session.R', echo=TRUE)
?return
acc.cnv<- read.delim("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Input data/unzipped original broad TCGA CNV data/ACC/all_data_by_genes.txt", stringsAsFactors = FALSE, header = TRUE)
events.per.cytoband<- function(object_name, threshold = -1, cytoband_column = 10,
column_data_start = 11, chromosome_interval = 0,
select_chromosome = 1, deletion = TRUE){
## Code to get proportion of deletions per cytoband
cnv.matrix<- as.matrix(object_name[,column_data_start:ncol(object_name)])
if (deletion == TRUE) {
cnv.matrix<- ifelse(cnv.matrix <= threshold, 1, 0)
} else {
cnv.matrix<- ifelse(cnv.matrix >= threshold, 1, 0)
}
##Create list to store data:
if (chromosome_interval == 0){
results <- vector("list", 2)
} else {
results <- vector("list", 4)
}
##Create matrix with raw deletions/amplification values and number of
#deletions/amplifications per gene
results[[1]]<- cnv.matrix %>%
as.data.frame() %>%
dplyr::mutate(sum.of.deletions = rowSums(.)) %>%
dplyr::mutate(number.of.tumours = ncol(.)-1) %>%
cbind(cytoband=object_name[,cytoband_column],
chromosome = object_name$CHR,
start = object_name$start, .)
##Create dataframe with number of deletions per gene, number of genes and number of
#potenatial deletion events that could occur
results[[2]]<- results[[1]]%>%
group_by(cytoband) %>%
dplyr::summarise(sum.of.genes.deleted = sum(sum.of.deletions),
total.number.of.genes=n(),
total.number.of.events = sum(number.of.tumours)) %>%
dplyr::mutate(proportion.of.deletions = sum.of.genes.deleted/total.number.of.events) %>%
tidyr::separate(cytoband, c("chromosome", "band"), sep = "[p:q]", remove = FALSE, convert = TRUE)
#dplyr::select(-band) %>%
results[[2]]$chromosome<-sub("X", "23", results[[2]]$chromosome)
results[[2]]$chromosome<-sub("Y", "24", results[[2]]$chromosome)
results[[2]]$chromosome<- as.integer(results[[2]]$chromosome)
results[[2]]<- dplyr::arrange(results[[2]], chromosome, cytoband)
results[[2]]$chromosome<-sub("23", "X", results[[2]]$chromosome)
results[[2]]$chromosome<-sub("24", "Y", results[[2]]$chromosome)
## Find row with highest value:
#test3 %>%
#arrange(desc(proportion.of.deletions)) %>%
#head()
## Finding chromosome names:
#grep("^1", test$cytoband)
#grepl("^1", test$cytoband)
#dplyr::filter(test, cytoband "^1"==TRUE)
#dplyr::filter(test, grepl("^1", test$cytoband))tid
#rowSums(cnv.matrix)
#############
#### Code to get proportion of deletions per unit size of chromosome:
#seq.test<- seq(1:100)
#table(cut(seq.test, 10, labels = seq(1:10)))
#table(cut(seq.test, chromosome_interval, labels = seq(1:chromosome_interval)))
#dplyr::ntile(seq.test, 10)
## Remove rows with no known start site:?
##Remove genes without chromosomal locations:
#genes.of.interest<- genes.of.interest[!is.na(genes.of.interest$CHRLOC)]
#which(is.na(genes.of.interest), arr.ind = TRUE)
if (chromosome_interval > 0){
## Very rough estimate of lengths of chromosomes:
results[[3]]<- results[[1]] %>%
group_by(chromosome) %>%
summarise(chromosome_start = min(start),
chromosome_end = max(start)) %>%
mutate(estimated_chromosome_length = chromosome_end - chromosome_start,
intervals_for_kb = estimated_chromosome_length/1000,
intervals_for_10kb = estimated_chromosome_length/10000,
intervals_for_100kb = estimated_chromosome_length/100000,
intervals_for_Mb = estimated_chromosome_length/1000000,
intervals_for_10Mb = estimated_chromosome_length/10000000)
filter.table<- results[[1]] %>%
dplyr::filter(chromosome == select_chromosome)
results[[4]]<- filter.table$start %>%
cut(chromosome_interval, labels = seq(1:chromosome_interval)) %>%
cbind(Intervals = ., filter.table) %>%
dplyr::group_by(Intervals) %>%
dplyr::summarise(sum.of.genes.deleted = sum(sum.of.deletions),
total.number.of.genes=n(),
total.number.of.potential.events = sum(number.of.tumours)) %>%
dplyr::mutate(proportion.of.deletions = sum.of.genes.deleted/total.number.of.potential.events)
}
return(results)
}
test1<- events.per.cytoband(acc.cnv,
threshold = -1,
cytoband_column = 3,
column_data_start = 4,
chromosome_interval = 0,
deletion = TRUE)
acc.cnv.chr.location<- chromosomal_location(acc.cnv)
test1<- events.per.cytoband(acc.cnv.chr.location,
threshold = -1,
cytoband_column = 3,
column_data_start = 4,
chromosome_interval = 0,
deletion = TRUE)
test1<- events.per.cytoband(acc.cnv.chr.location,
threshold = -1,
cytoband_column = 10,
column_data_start = 11,
chromosome_interval = 0,
deletion = TRUE)
glimpse(test1[[1]])
glimpse(test1[[2]])
test2<- events.per.cytoband(acc.cnv.chr.location,
threshold = -1,
cytoband_column = 10,
column_data_start = 11 ,
select_chromosome = 1,
chromosome_interval = 10,
deletion = TRUE)
glimpse(test2[[1]])
glimpse(test2[[2]])
glimpse(test2[[3]])
glimpse(test2[[4]])
load("./R workspaces/co-deletions workspace.RData")
