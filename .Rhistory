###Keep column with less NA's
sample_pairs<- c()
##find sample pairs:
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
#sample_pairs
##keep unique sample_pairs columns only
if (ncol(sample_pairs) == 1) {
}else {
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
#sample_pairs
}
## Identify which column has the lowest number of NAs
n<- nrow(sample_pairs)
df<- matrix(NA, nrow = 1, ncol = n)
#df
which_row_to_remove<- c()
for (a in 1:ncol(sample_pairs)){
for (b in 1:n){
df[1,b]<- sum(is.na(clinical_cbioportal_list[[i]][sample_pairs[b,a],]))
}
which_row<- which(max(df[1,]) == df[1,])
which_row_to_remove<-c(which_row_to_remove, sample_pairs[which_row, a])
}
# sample_pairs
# which_row_to_remove
which_row_to_remove<- as.vector(which_row_to_remove)
clinical_cbioportal_list[[i]]<- clinical_cbioportal_list[[i]][-which_row_to_remove,]
} else {}
setwd("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Input data/clinical/cbioportal/")
file_names<-dir()
file_names
clinical_cbioportal_list <- vector("list", length(file_names))
for (i in 1: length(file_names)){
clinical_cbioportal_list[[i]]<-read.delim(file_names[i], header = TRUE, stringsAsFactors = FALSE)
print(file_names[i])
}
names(clinical_cbioportal_list)<- file_names
clinical_cbioportal_list[[1]][1:2, 1:5]
lapply(clinical_cbioportal_list, function(x) dim(x))
for (i in 1:length(clinical_cbioportal_list)) {
##Get sample IDs
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
##Find duplicate patients IDS
indicies<- which(duplicated(patient_IDs))
indicies
#clinical_cbioportal_list[[i]][indicies, 4:6]
if (any(indicies)) {
##Find original and repeated patient IDS
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
#indicies
###Keep column with less NA's
sample_pairs<- c()
##find sample pairs:
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
#sample_pairs
##keep unique sample_pairs columns only
if (ncol(sample_pairs) == 1) {
}else {
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
#sample_pairs
}
## Identify which column has the lowest number of NAs
n<- nrow(sample_pairs)
df<- matrix(NA, nrow = 1, ncol = n)
#df
which_row_to_remove<- c()
for (a in 1:ncol(sample_pairs)){
for (b in 1:n){
df[1,b]<- sum(is.na(clinical_cbioportal_list[[i]][sample_pairs[b,a],]))
}
which_row<- which(max(df[1,]) == df[1,])
which_row_to_remove<-c(which_row_to_remove, sample_pairs[which_row, a])
}
# sample_pairs
# which_row_to_remove
which_row_to_remove<- as.vector(which_row_to_remove)
clinical_cbioportal_list[[i]]<- clinical_cbioportal_list[[i]][-which_row_to_remove,]
} else {}
}
names(clinical_cbioportal_list[[i]])
names(clinical_cbioportal_list[i])
file_names<-dir()
file_names
clinical_cbioportal_list <- vector("list", length(file_names))
for (i in 1: length(file_names)){
clinical_cbioportal_list[[i]]<-read.delim(file_names[i], header = TRUE, stringsAsFactors = FALSE)
print(file_names[i])
}
names(clinical_cbioportal_list)<- file_names
clinical_cbioportal_list[[1]][1:2, 1:5]
lapply(clinical_cbioportal_list, function(x) dim(x))
for (i in 1:length(clinical_cbioportal_list)) {
##Get sample IDs
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
##Find duplicate patients IDS
indicies<- which(duplicated(patient_IDs))
indicies
#clinical_cbioportal_list[[i]][indicies, 4:6]
if (any(indicies)) {
##Find original and repeated patient IDS
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
#indicies
###Keep column with less NA's
sample_pairs<- c()
##find sample pairs:
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
#sample_pairs
##keep unique sample_pairs columns only
if (ncol(sample_pairs) == 1) {
}else {
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
#sample_pairs
}
## Identify which column has the lowest number of NAs
n<- nrow(sample_pairs)
df<- matrix(NA, nrow = 1, ncol = n)
#df
which_row_to_remove<- c()
for (a in 1:ncol(sample_pairs)){
for (b in 1:n){
df[1,b]<- sum(is.na(clinical_cbioportal_list[[i]][sample_pairs[b,a],]))
}
which_row<- which(max(df[1,]) == df[1,])
which_row_to_remove<-c(which_row_to_remove, sample_pairs[which_row, a])
}
# sample_pairs
# which_row_to_remove
which_row_to_remove<- as.vector(which_row_to_remove)
clinical_cbioportal_list[[i]]<- clinical_cbioportal_list[[i]][-which_row_to_remove,]
} else {}
print(names(clinical_cbioportal_list[i]))
}
i=3
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
indicies
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
indicies<- which(duplicated(patient_IDs))
indicies
any(indicies)
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
indicies
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
indicies<- which(duplicated(patient_IDs))
indicies
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
indicies
sample_pairs<- c()
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
sample_pairs
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
sample_pairs
sample_pairs<- c()
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
sample_pairs
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
sample_pairs
class(sample_pairs)
sample_pairs<- as.data.frame(sample_pairs)
sample_pairs
n<- nrow(sample_pairs)
df<- matrix(NA, nrow = 1, ncol = n)
which_row_to_remove<- c()
for (a in 1:ncol(sample_pairs)){
for (b in 1:n){
df[1,b]<- sum(is.na(clinical_cbioportal_list[[i]][sample_pairs[b,a],]))
}
which_row<- which(max(df[1,]) == df[1,])
which_row_to_remove<-c(which_row_to_remove, sample_pairs[which_row, a])
}
which_row_to_remove<- as.vector(which_row_to_remove)
which_row_to_remove
file_names<-dir()
file_names
clinical_cbioportal_list <- vector("list", length(file_names))
for (i in 1: length(file_names)){
clinical_cbioportal_list[[i]]<-read.delim(file_names[i], header = TRUE, stringsAsFactors = FALSE)
print(file_names[i])
}
names(clinical_cbioportal_list)<- file_names
clinical_cbioportal_list[[1]][1:2, 1:5]
lapply(clinical_cbioportal_list, function(x) dim(x))
for (i in 1:length(clinical_cbioportal_list)) {
##Get sample IDs
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
##Find duplicate patients IDS
indicies<- which(duplicated(patient_IDs))
indicies
#clinical_cbioportal_list[[i]][indicies, 4:6]
if (any(indicies)) {
##Find original and repeated patient IDS
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
#indicies
###Keep column with less NA's
sample_pairs<- c()
##find sample pairs:
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
#sample_pairs
##keep unique sample_pairs columns only
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
sample_pairs<- as.data.frame(sample_pairs)
#sample_pairs
## Identify which column has the lowest number of NAs
n<- nrow(sample_pairs)
df<- matrix(NA, nrow = 1, ncol = n)
#df
which_row_to_remove<- c()
for (a in 1:ncol(sample_pairs)){
for (b in 1:n){
df[1,b]<- sum(is.na(clinical_cbioportal_list[[i]][sample_pairs[b,a],]))
}
which_row<- which(max(df[1,]) == df[1,])
which_row_to_remove<-c(which_row_to_remove, sample_pairs[which_row, a])
}
# sample_pairs
# which_row_to_remove
which_row_to_remove<- as.vector(which_row_to_remove)
clinical_cbioportal_list[[i]]<- clinical_cbioportal_list[[i]][-which_row_to_remove,]
} else {}
print(names(clinical_cbioportal_list[i]))
}
lapply(clinical_cbioportal_list, function(x) dim(x))
lapply(clinical_fbget_list, function(x) dim(x))
for (i in 1:length(clinical_cbioportal_list)){
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
indicies<- which(duplicated(patient_IDs))
indicies
}
for (i in 1:length(clinical_cbioportal_list)){
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
indicies<- which(duplicated(patient_IDs))
print(names(clinical_cbioportal_list[i]))
print(indicies)
}
for (i in 1:length(clinical_fbget_list)){
patient_IDs<- clinical_fbget_list[[i]]$Patient.ID
indicies<- which(duplicated(patient_IDs))
print(names(clinical_fbget_list[i]))
print(indicies)
}
sapply(clinical_fbget_list, function(x) dim(x))
sapply(threshold_CNV_all_table_loc ,function(x) dim(x)-11)
sapply(threshold_CNV_all_table_loc ,function(x) dim(x))
dim(threshold_CNV_all_table_loc[[1]])
threshold_CNV_all_table_loc
threshold_CNV_all_table_loc[[1]]
dim(threshold_CNV_all_table_loc[[1]])
class(thres)
class(threshold_short_cnv_list_loc[[1]])
dim(threshold_short_cnv_list_loc[[1]])
sapply(threshold_short_cnv_list_loc, function(x) dim(x))
sapply(clinical_cbioportal_list, function(x) dim(x))
sapply(clinical_cbioportal_list, function(x) dim(x))
sapply(clinical_fbget_list, function(x) dim(x))
ncol(clinical_cbioportal_list[[1]])
nrow(clinical_cbioportal_list[[1]])
sapply(clinical_cbioportal_list, function(x) nrow(x))
sapply(clinical_fbget_list, function(x) nrow(x))
sapply(threshold_short_cnv_list_loc, function(x) ncol(x)-11)
sapply(clinical_cbioportal_list, function(x) nrow(x))
sapply(clinical_fbget_list, function(x) nrow(x))
sapply(threshold_short_cnv_list_loc, function(x) ncol(x)-11)
setwd("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Input data/clinical/cbioportal/")
file_names<-dir()
file_names
clinical_cbioportal_list <- vector("list", length(file_names))
for (i in 1: length(file_names)){
clinical_cbioportal_list[[i]]<-read.delim(file_names[i], header = TRUE, stringsAsFactors = FALSE)
print(file_names[i])
}
names(clinical_cbioportal_list)<- file_names
clinical_cbioportal_list[[1]][1:2, 1:5]
lapply(clinical_cbioportal_list, function(x) dim(x))
for (i in 1:length(clinical_cbioportal_list)) {
##Get sample IDs
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
##Find duplicate patients IDS
indicies<- which(duplicated(patient_IDs))
indicies
#clinical_cbioportal_list[[i]][indicies, 4:6]
if (any(indicies)) {
##Find original and repeated patient IDS
repeated_samples<- patient_IDs[indicies]
indicies<- which(patient_IDs %in% repeated_samples)
#indicies
###Keep column with less NA's
sample_pairs<- c()
##find sample pairs:
for (j in 1: length(indicies)){
sampleID<- patient_IDs[indicies[j]]
sampleID<- grep(sampleID,patient_IDs)
sample_pairs<- cbind(sample_pairs, sampleID)
}
#sample_pairs
##keep unique sample_pairs columns only
sample_pairs<- sample_pairs[,!duplicated(sample_pairs, MARGIN = 2)]
sample_pairs<- as.data.frame(sample_pairs)
#sample_pairs
## Identify which column has the lowest number of NAs
n<- nrow(sample_pairs)
df<- matrix(NA, nrow = 1, ncol = n)
#df
which_row_to_remove<- c()
for (a in 1:ncol(sample_pairs)){
for (b in 1:n){
df[1,b]<- sum(is.na(clinical_cbioportal_list[[i]][sample_pairs[b,a],]))
}
which_row<- which(max(df[1,]) == df[1,])
which_row_to_remove<-c(which_row_to_remove, sample_pairs[which_row, a])
}
# sample_pairs
# which_row_to_remove
which_row_to_remove<- as.vector(which_row_to_remove)
clinical_cbioportal_list[[i]]<- clinical_cbioportal_list[[i]][-which_row_to_remove,]
} else {}
print(names(clinical_cbioportal_list[i]))
}
sapply(clinical_cbioportal_list, function(x) dim(x))
sapply(clinical_fbget_list, function(x) dim(x))
sapply(threshold_CNV_all_table_loc ,function(x) dim(x)-11)
for (i in 1:length(clinical_cbioportal_list)){
patient_IDs<- clinical_cbioportal_list[[i]]$Patient.ID
indicies<- which(duplicated(patient_IDs))
print(names(clinical_cbioportal_list[i]))
print(indicies)
}
setwd("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions")
dir()
saveRDS(clinical_cbioportal_list, file = "../R workspaces/clinical_cbioportal_list.rds")
saveRDS(clinical_cbioportal_list, file = "./R workspaces/clinical_cbioportal_list")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(pheatmap)
library(RColorBrewer)
library(org.Hs.eg.db)
library(biomaRt)
library(parallel)
### Set working directory
setwd("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/")
#Server: setwd("/local/data/public/mcb53/Internship/Code/co-deletions/")
### Load data
#load("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Input data/R workspaces/co-deletions workspace.RData")
load("./R workspaces/co-deletions workspace.RData")
co.deletions.per.cytoband.circle.plots.table <- readRDS("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/total.co-deletion.events.per.cytoband.rds")
deletions.per.cytoband.circle.plots.table<- readRDS( "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/total.deletion.events.per.cytoband.rds")
short.cnv.list<- readRDS("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/target.cancer.list.rds")
co_deletions_removed_zeros_plot_table2<- readRDS("/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/BRCA_co_deletion_distance_plot_table.rds")
import.files.from.directories<-function(path.to.dir,file.to.import){
currentwd<- getwd()
setwd(path.to.dir)
directory.names<-dir()
my.list <- vector("list", length(directory.names))
for (i in 1: length(directory.names)){
move.to.directory<-paste0(path.to.dir,"/",directory.names[i])
setwd(move.to.directory)
my.list[[i]]<-read.delim(file.to.import, stringsAsFactors = FALSE, header = TRUE)
print(directory.names[i])
}
names(my.list)<- directory.names
setwd(currentwd)
return(my.list)
}
path<-"/Users/Matt/Documents/Masters_Bioinformatics/Internships/Input data/unzipped original broad TCGA CNV data"
file.to.import<-"all_thresholded.by_genes.txt"
threshold_cnv_list<- import.files.from.directories(path, file.to.import)
length(threshold_cnv_list)
dim(threshold_cnv_list[[1]])
acc.cnv.list.loc<- chromosomal_location(threshold_cnv_list[[1]])
saveRDS(threshold_cnv_list, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_cnv_list.rds")
join.cnv.datasets<- function(object_name, column = 4, data.sets = "ALL"){
if(data.sets == "ALL"){
index<- seq(1:length(object_name))
} else {
names.of.tables<-names(object_name)
index<-which(names.of.tables %in% data.sets)
print("DO NOT WORRY ABOUT THE FOLLOWING WARNING MESSAGE:")
}
df<- object_name[[1]] %>% dplyr::select(c(Gene.Symbol,Locus.ID,Cytoband))
for (i in index){
df2<-object_name[[i]][,c(1,column:ncol(object_name[[i]]))]
df<- full_join(df, df2, by = "Gene.Symbol")
}
return(df)
}
threshold_CNV_all_table<-join.cnv.datasets(threshold_cnv_list, column = 4)
threshold_CNV_all_table<-join.cnv.datasets(threshold_cnv_list, column = 4)
dim(threshold_CNV_all_table)
saveRDS(threshold_CNV_all_table, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_CNV_all_table.rds")
sapply(cnv.list, function(x) ncol(x)-3)
sapply(short.cnv.list, function(x) ncol(x)-3)
ncol(CNV.all.table)-3
names(cnv.list$COAD) %in% names(cnv.list$COADREAD)
names(cnv.list$READ) %in% names(cnv.list$COADREAD)
for (i in 1: length(cnv.list)){
tumours<- names(cnv.list[[i]])
tumours<- tumours[-(1:3)]
shared_tumours<- any(tumours %in% names(cnv.list$COADREAD))
print(paste(names(cnv.list[i]), shared_tumours, sep = " "))
}
chromosomal_location<- function(object_name){
##Variables I want:
keys<- as.character(object_name$Locus.ID)
columns<- c("CHR", "CHRLOC", "CHRLOCEND")
## Search for gene chromosomal locations:
genes.of.interest<- AnnotationDbi::select(org.Hs.eg.db, keys, columns, keytype = "ENTREZID")
## Remove duplicated entries:
genes.of.interest<- na.omit(genes.of.interest[!duplicated(genes.of.interest$ENTREZID), ])
## Add additional columns to dataframe including strand, gene start and end:
genes.of.interest$strand<- ifelse(genes.of.interest$CHRLOC <0, "-", "+")
genes.of.interest$start<- abs(genes.of.interest$CHRLOC)
genes.of.interest$end<- abs(genes.of.interest$CHRLOCEND)
##########
###Join gene location dataframe to original CNV data table
##Rename ENTREZID column so it can be joined to oringinal dataframe:
genes.of.interest<- dplyr::rename(genes.of.interest, Locus.ID = ENTREZID)
genes.of.interest$Locus.ID<- as.integer(genes.of.interest$Locus.ID)
genes.of.interest<- full_join(genes.of.interest,object_name, by="Locus.ID")
##########
### Order genes by chromosome and location:
## Rename X and Y chromosomes to integer so they can be properly sorted.
genes.of.interest$CHR<-sub("X", "23", genes.of.interest$CHR)
genes.of.interest$CHR<-sub("Y", "24", genes.of.interest$CHR)
genes.of.interest$CHR<- as.integer(genes.of.interest$CHR)
genes.of.interest<- dplyr::arrange(genes.of.interest, CHR, start)
genes.of.interest$CHR<-sub("23","X",  genes.of.interest$CHR)
genes.of.interest$CHR<-sub("24", "Y", genes.of.interest$CHR)
return(genes.of.interest)
}
acc.cnv.chr.location<-chromosomal_location(cnv.list[[1]])
threshold_CNV_all_table_loc<- chromosomal_location(threshold_CNV_all_table)
saveRDS(threshold_CNV_all_table_loc, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_CNV_all_table_loc.rds")
threshold_cnv_list_loc<- lapply(threshold_cnv_list, function(x) chromosomal_location(x))
identical(acc.cnv.chr.location, threshold_cnv_list_loc[[1]])
threshold_cnv_list_loc[[1]][1:2, 1:12]
threshold_cnv_list_loc[[1]]
threshold_cnv_list_loc[[1]][1:2, 1:12]
identical(acc.cnv.chr.location, threshold_cnv_list_loc[[1]])
saveRDS(threshold_cnv_list_loc, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_cnv_list_loc.rds")
acc.cnv.chr.location<-chromosomal_location(cnv.list[[1]])
identical(acc.cnv.chr.location, threshold_cnv_list_loc[[1]])
identical(acc.cnv.chr.location, threshold_cnv_list_loc[[1]])
?identical
identical(acc.cnv.chr.location, threshold_cnv_list_loc[[1]], ignore.environment =T)
all.equal(acc.cnv.chr.location, threshold_cnv_list_loc[[1]])
names(threshold_cnv_list_loc)
saveRDS(threshold_cnv_list_loc, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_cnv_list_loc.rds")
threshold_short_cnv_list<- threshold_cnv_list[c(3, 7, 9, 12, 20, 21, 23, 24, 26, 29, 30)]
length(threshold_short_cnv_list)
names(threshold_short_cnv_list)
saveRDS(threshold_short_cnv_list, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_short_cnv_list.rds")
threshold_short_cnv_list_loc<- threshold_cnv_list_loc[c(3, 7, 9, 12, 20, 21, 23, 24, 26, 29, 30)]
length(threshold_short_cnv_list_loc)
names(threshold_short_cnv_list_loc)
saveRDS(threshold_short_cnv_list_loc, "/Users/Matt/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/R workspaces/threshold_short_cnv_list_loc.rds")
sapply(threshold_short_cnv_list, function(x), ncol(x)-4)
sapply(threshold_short_cnv_list, function(x) ncol(x)-4)
sapply(threshold_short_cnv_list_loc, function(x) ncol(x)-11)
df<-as.data.frame(c(1,2,3), c(a,b,c))
df<-as.data.frame(c(1,2,3), c("a","b","c"))
df
df<-as.data.frame(first = c(1,2,3), second = c("a","b","c"))
df<-data.frame(first = c(1,2,3), second = c("a","b","c"))
df
df<-data.frame(first = seq(1:10), second = letters(1:10), )
df<-data.frame(first = seq(1:10), second = letters[1:10], )
letters
letters[1:10]
df<-data.frame(first = seq(1:10), second = letters[1:10] )
df
df<-data.frame(first = seq(1:10), second = letters[1:10], c(F,F,F, F, F,T, T, T, T, T) )
df
df<-data.frame(first = seq(1:10), second = letters[1:10], c(F,F,F, F, F,T, T, T, T, T), c(T, T, T, T, T, F,F,F, F, F ) )
df
df<-data.frame(first = seq(1:10),
second = letters[1:10],
c(F,F,F, F, F,T, T, T, T, T),
c(T, T, T, T, T, F,F,F, F, F ),
c(T, F, T, F, T, F, T, F, T, F))
df
target_genes
target_gene<- target_genes[2]
gene_information_list
