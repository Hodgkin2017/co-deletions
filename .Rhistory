Cytoband = FALSE,
print_to_screen = FALSE,
plot_graph = FALSE,
path = "./"){
#############
## Get target gene name, chromosome start and end locations and set interval upstream and downstream
#of target gene used to identify genes in close proximety to target gene.
target_gene<- target_gene_list[[1]]
Chromosome<- target_gene_list[[2]]
selection_criteria<- c(target_gene_list[[4]] - distance, target_gene_list[[5]] + distance)
print(target_gene)
#############
### Get genes surrounding target gene
##Remove genes with no start site
if (remove_NA == TRUE){
cnv.table<- cnv.table %>%
dplyr::filter(!is.na(start))
}
## Select chromosome
if (Chromosome[1] > 0 & start == FALSE){
##Select Chromosome of interest and convert CNV data to matrix:
matrix<- cnv.table %>% dplyr::filter(CHR %in% Chromosome)
cnv.matrix<- as.matrix(matrix[,column_start:ncol(matrix)])
rownames(cnv.matrix)<- matrix$Gene.Symbol
}
## Select chromosome and region of interest
if (start == TRUE & Chromosome[1] > 0){
##Select Chromosome of interest and convert CNV data to matrix:
matrix<- cnv.table %>% dplyr::filter(CHR %in% Chromosome)
##Select Chromosomal region of interest and convert CNV data to matrix:
matrix<- matrix %>%
dplyr::filter(start >= selection_criteria[1], end <= selection_criteria[2])
##Convert Chromosome and region of interest into matrix:
cnv.matrix<- as.matrix(matrix[,column_start:ncol(matrix)])
rownames(cnv.matrix)<- matrix$Gene.Symbol
} else if (Cytoband == TRUE){
##Select Cytobands of interest and convert CNV data to matrix:
matrix<- cnv.table %>% dplyr::filter(Cytoband %in% selection_criteria)
cnv.matrix<- as.matrix(matrix[,column_start:ncol(matrix)])
rownames(cnv.matrix)<- matrix$Gene.Symbol
} else {
##Convert ALL CNV data to matrix:
cnv.matrix<- as.matrix(cnv.table[,column_start:ncol(cnv.table)])
rownames(cnv.matrix)<- cnv.table$Gene.Symbol
}
##Create a binary matrix of CNV data such that deletions (deletion = TRUE) or
#amplifications (deletion = FALSE) below (for deletions) or above (for amplifications) a threshold = 1
if (deletion == TRUE) {
cnv.matrix<- ifelse(cnv.matrix <= threshold, 1, 0)
} else {
cnv.matrix<- ifelse(cnv.matrix >= threshold, 1, 0)
}
###########
###Create a table with genes in rows and tumours on columns and each entry has a number from 1 to 4 depending on which
#deletion/amplification catagory it belongs to:
#1 = Deletion of target gene only.
#2 = Deletion of both target gene and proximal gene (co-deleted gene or interest)
#3 = Deletion of proximal gene only.
#4 = Deletion in neither target gene or proximal gene.
##Add gene names as new column
gene_names_cnv.matrix<- cbind.data.frame(gene = row.names(cnv.matrix) ,cnv.matrix)
gene_names_cnv.matrix$gene<-as.character(gene_names_cnv.matrix$gene)
gene_names<- row.names(cnv.matrix)
##########
###Function to categorise gene deletions:
## If I remove it from within this function it no longer works for some strange reason!
categorise_deletion_type_function<- function(gene_names, gene_names_cnv.matrix){
##Determine if target gene is deleted
target_gene_deleted<- gene_names_cnv.matrix %>%
dplyr::filter(gene == target_gene) %>%
dplyr::select(-gene)
target_gene_deleted<- as.vector(target_gene_deleted == 1)
##Determine if proximal gene is deleted
proximal_gene_deleted<- gene_names_cnv.matrix %>%
dplyr::filter(gene == gene_names) %>%
dplyr::select(-gene)
proximal_gene_deleted<- as.vector(proximal_gene_deleted == 1)
##Determine if target gene and not proximal gene is deleted(category 1)
deletion_category1<- proximal_gene_deleted - target_gene_deleted < 0
##Determine if target gene and proximal gene are deleted together (category 2)
deletion_category2<- target_gene_deleted + proximal_gene_deleted > 1
##Determine if proximal gene is deleted without target gene (category 3)
deletion_category3<- target_gene_deleted - proximal_gene_deleted < 0
##Determine if neither proximal gene or target gene is deleted (category 4)
deletion_category4<- target_gene_deleted + proximal_gene_deleted == 0
## Join deletion_category vectors into table then take the non-NA value for each tumour:
all_deletion_category_table<- cbind(deletion_category1, deletion_category2, deletion_category3, deletion_category4)
final_deletion_category<- max.col(all_deletion_category_table,ties.method="first")
return(final_deletion_category)
}
## Use categorise_deletion_type_function to loop over all genes around target gene and
#categorise each tumour into group 1,2,3 or 4.
deletion_category_table<- lapply(gene_names, function(x) categorise_deletion_type_function(x, gene_names_cnv.matrix))
deletion_category_table<- do.call(rbind, deletion_category_table)
colnames(deletion_category_table)<- colnames(cnv.matrix)
rownames(deletion_category_table)<- rownames(cnv.matrix)
#########################################
### Join tumour category table above to immune infiltrate table:
deletion_category<-t(deletion_category_table)
##Convert patient IDs in deletion_category so they match with the patient IDS in the clinical table
deletion_category_patient_ID<- rownames(deletion_category) %>%
substr(0, 12) %>%
gsub("\\.", "-", .) %>%
cbind.data.frame(patientBarcode = ., deletion_category)
deletion_category_patient_ID$patientBarcode<- as.character(deletion_category_patient_ID$patientBarcode)
##Get names of infiltrating cell types:
tcia_immune_infiltrate_cell_type<- unique(tcia_immune_infiltrate$cell_type)
tcia_immune_infiltrate_list<- vector("list", length(tcia_immune_infiltrate_cell_type))
for (i in 1: length(tcia_immune_infiltrate_cell_type)){
rows_to_keep<- immune_cell_infiltrate_table$cell_type == tcia_immune_infiltrate_cell_type[i]
small_immune_cell_infiltrate_table<- immune_cell_infiltrate_table[rows_to_keep,]
##Join small_immune_cell_infiltrate_table with CNV data
small_immune_cell_infiltrate_table<- dplyr::full_join(small_immune_cell_infiltrate_table, deletion_category_patient_ID, by = "patientBarcode")
##Remove NA entries
#column_names<- colnames(small_immune_cell_infiltrate_table)
small_immune_cell_infiltrate_table<- small_immune_cell_infiltrate_table[!is.na(small_immune_cell_infiltrate_table[,ncol(small_immune_cell_infiltrate_table)]),]
##Add to list
tcia_immune_infiltrate_list[[i]]<- small_immune_cell_infiltrate_table
}
tcia_immune_infiltrate_table<- do.call(rbind, tcia_immune_infiltrate_list)
################################################
###  analysis:
return(tcia_immune_infiltrate_table)
}
list1<- gene_information_list[[2]]
table1<- tcia_immune_infiltrate
table2<- threshold_selected_cnv_list_plus_all_loc$ALL
test<- immune_cell_infiltrate(target_gene_list = list1,
immune_cell_infiltrate_table = table1,
cnv.table = table2,
distance = 2.5e+06,
threshold = -2,
deletion = TRUE,
infiltrate_column = 4,
column_start = 11,
start = TRUE,
remove_NA = TRUE,
Cytoband = FALSE,
print_to_screen = FALSE,
plot_graph = FALSE,
path = "./")
dim(test)
identical(test, tcia_immune_infiltrate_table)
test<- immune_cell_infiltrate(target_gene_list = list1,
immune_cell_infiltrate_table = table1,
cnv.table = table2,
distance = 2.5e+06,
threshold = -2,
deletion = TRUE,
infiltrate_column = 4,
column_start = 11,
start = TRUE,
remove_NA = TRUE,
Cytoband = FALSE,
print_to_screen = FALSE,
plot_graph = FALSE,
path = "./")
immune_cell_infiltrate<- function(target_gene_list,
immune_cell_infiltrate_table,
cnv.table,
distance = 2.5e+06,
threshold = -2,
deletion = TRUE,
infiltrate_column,
column_start = 11,
start = TRUE,
remove_NA = TRUE,
Cytoband = FALSE,
print_to_screen = FALSE,
plot_graph = FALSE,
path = "./"){
#############
## Get target gene name, chromosome start and end locations and set interval upstream and downstream
#of target gene used to identify genes in close proximety to target gene.
target_gene<- target_gene_list[[1]]
Chromosome<- target_gene_list[[2]]
selection_criteria<- c(target_gene_list[[4]] - distance, target_gene_list[[5]] + distance)
print(target_gene)
#############
### Get genes surrounding target gene
##Remove genes with no start site
if (remove_NA == TRUE){
cnv.table<- cnv.table %>%
dplyr::filter(!is.na(start))
}
## Select chromosome
if (Chromosome[1] > 0 & start == FALSE){
##Select Chromosome of interest and convert CNV data to matrix:
matrix<- cnv.table %>% dplyr::filter(CHR %in% Chromosome)
cnv.matrix<- as.matrix(matrix[,column_start:ncol(matrix)])
rownames(cnv.matrix)<- matrix$Gene.Symbol
}
## Select chromosome and region of interest
if (start == TRUE & Chromosome[1] > 0){
##Select Chromosome of interest and convert CNV data to matrix:
matrix<- cnv.table %>% dplyr::filter(CHR %in% Chromosome)
##Select Chromosomal region of interest and convert CNV data to matrix:
matrix<- matrix %>%
dplyr::filter(start >= selection_criteria[1], end <= selection_criteria[2])
##Convert Chromosome and region of interest into matrix:
cnv.matrix<- as.matrix(matrix[,column_start:ncol(matrix)])
rownames(cnv.matrix)<- matrix$Gene.Symbol
} else if (Cytoband == TRUE){
##Select Cytobands of interest and convert CNV data to matrix:
matrix<- cnv.table %>% dplyr::filter(Cytoband %in% selection_criteria)
cnv.matrix<- as.matrix(matrix[,column_start:ncol(matrix)])
rownames(cnv.matrix)<- matrix$Gene.Symbol
} else {
##Convert ALL CNV data to matrix:
cnv.matrix<- as.matrix(cnv.table[,column_start:ncol(cnv.table)])
rownames(cnv.matrix)<- cnv.table$Gene.Symbol
}
##Create a binary matrix of CNV data such that deletions (deletion = TRUE) or
#amplifications (deletion = FALSE) below (for deletions) or above (for amplifications) a threshold = 1
if (deletion == TRUE) {
cnv.matrix<- ifelse(cnv.matrix <= threshold, 1, 0)
} else {
cnv.matrix<- ifelse(cnv.matrix >= threshold, 1, 0)
}
###########
###Create a table with genes in rows and tumours on columns and each entry has a number from 1 to 4 depending on which
#deletion/amplification catagory it belongs to:
#1 = Deletion of target gene only.
#2 = Deletion of both target gene and proximal gene (co-deleted gene or interest)
#3 = Deletion of proximal gene only.
#4 = Deletion in neither target gene or proximal gene.
##Add gene names as new column
gene_names_cnv.matrix<- cbind.data.frame(gene = row.names(cnv.matrix) ,cnv.matrix)
gene_names_cnv.matrix$gene<-as.character(gene_names_cnv.matrix$gene)
gene_names<- row.names(cnv.matrix)
##########
###Function to categorise gene deletions:
## If I remove it from within this function it no longer works for some strange reason!
categorise_deletion_type_function<- function(gene_names, gene_names_cnv.matrix){
##Determine if target gene is deleted
target_gene_deleted<- gene_names_cnv.matrix %>%
dplyr::filter(gene == target_gene) %>%
dplyr::select(-gene)
target_gene_deleted<- as.vector(target_gene_deleted == 1)
##Determine if proximal gene is deleted
proximal_gene_deleted<- gene_names_cnv.matrix %>%
dplyr::filter(gene == gene_names) %>%
dplyr::select(-gene)
proximal_gene_deleted<- as.vector(proximal_gene_deleted == 1)
##Determine if target gene and not proximal gene is deleted(category 1)
deletion_category1<- proximal_gene_deleted - target_gene_deleted < 0
##Determine if target gene and proximal gene are deleted together (category 2)
deletion_category2<- target_gene_deleted + proximal_gene_deleted > 1
##Determine if proximal gene is deleted without target gene (category 3)
deletion_category3<- target_gene_deleted - proximal_gene_deleted < 0
##Determine if neither proximal gene or target gene is deleted (category 4)
deletion_category4<- target_gene_deleted + proximal_gene_deleted == 0
## Join deletion_category vectors into table then take the non-NA value for each tumour:
all_deletion_category_table<- cbind(deletion_category1, deletion_category2, deletion_category3, deletion_category4)
final_deletion_category<- max.col(all_deletion_category_table,ties.method="first")
return(final_deletion_category)
}
## Use categorise_deletion_type_function to loop over all genes around target gene and
#categorise each tumour into group 1,2,3 or 4.
deletion_category_table<- lapply(gene_names, function(x) categorise_deletion_type_function(x, gene_names_cnv.matrix))
deletion_category_table<- do.call(rbind, deletion_category_table)
colnames(deletion_category_table)<- colnames(cnv.matrix)
rownames(deletion_category_table)<- rownames(cnv.matrix)
#########################################
### Join tumour category table above to immune infiltrate table:
deletion_category<-t(deletion_category_table)
##Convert patient IDs in deletion_category so they match with the patient IDS in the clinical table
deletion_category_patient_ID<- rownames(deletion_category) %>%
substr(0, 12) %>%
gsub("\\.", "-", .) %>%
cbind.data.frame(patientBarcode = ., deletion_category)
deletion_category_patient_ID$patientBarcode<- as.character(deletion_category_patient_ID$patientBarcode)
##Get names of infiltrating cell types:
tcia_immune_infiltrate_cell_type<- unique(tcia_immune_infiltrate$cell_type)
tcia_immune_infiltrate_list<- vector("list", length(tcia_immune_infiltrate_cell_type))
for (i in 1: length(tcia_immune_infiltrate_cell_type)){
rows_to_keep<- immune_cell_infiltrate_table$cell_type == tcia_immune_infiltrate_cell_type[i]
small_immune_cell_infiltrate_table<- immune_cell_infiltrate_table[rows_to_keep,]
##Join small_immune_cell_infiltrate_table with CNV data
small_immune_cell_infiltrate_table<- dplyr::full_join(small_immune_cell_infiltrate_table, deletion_category_patient_ID, by = "patientBarcode")
##Remove NA entries
#column_names<- colnames(small_immune_cell_infiltrate_table)
small_immune_cell_infiltrate_table<- small_immune_cell_infiltrate_table[!is.na(small_immune_cell_infiltrate_table[,ncol(small_immune_cell_infiltrate_table)]),]
##Add to list
tcia_immune_infiltrate_list[[i]]<- small_immune_cell_infiltrate_table
}
tcia_immune_infiltrate_table<- do.call(rbind, tcia_immune_infiltrate_list)
################################################
###  analysis:
return(tcia_immune_infiltrate_table)
}
list1<- gene_information_list[[2]]
table1<- tcia_immune_infiltrate
table2<- threshold_selected_cnv_list_plus_all_loc$ALL
test<- immune_cell_infiltrate(target_gene_list = list1,
immune_cell_infiltrate_table = table1,
cnv.table = table2,
distance = 2.5e+06,
threshold = -2,
deletion = TRUE,
infiltrate_column = 4,
column_start = 11,
start = TRUE,
remove_NA = TRUE,
Cytoband = FALSE,
print_to_screen = FALSE,
plot_graph = FALSE,
path = "./")
test
dim(CNV.all.table)
dim(threshold_CNV_all_table_loc)
threshold_CNV_all_table_loc[1:10,]
threshold_CNV_all_table_loc[1:10,1:10]
threshold_CNV_all_table_loc$start
complete.cases(threshold_CNV_all_table_loc$start)
sum(complete.cases(threshold_CNV_all_table_loc$start))
list2<- gene_information_list[1:2]
list2
test_lapply<- lapply(list2, function(x) immune_cell_infiltrate(target_gene_list = x,
immune_cell_infiltrate_table = table1,
cnv.table = table2,
distance = 2.5e+06,
threshold = -2,
deletion = TRUE,
infiltrate_column = 4,
column_start = 11,
start = TRUE,
remove_NA = TRUE,
Cytoband = FALSE,
print_to_screen = FALSE,
plot_graph = FALSE,
path = "./")
)
length(test_lapply)
dim(test_lapply[[1]])
identical(test, test_lapply[[2]])
test_lapply[[1]][1:5, 1:10]
data.frame(
Sabor =
c(5, 7, 3,
4, 2, 6,
5, 3, 6,
5, 6, 0,
7, 4, 0,
7, 7, 0,
6, 6, 0,
4, 6, 1,
6, 4, 0,
7, 7, 0,
2, 4, 0,
5, 7, 4,
7, 5, 0,
4, 5, 0,
6, 6, 3
),
Tipo = factor(rep(c("A", "B", "C"), 15)),
Provador = factor(rep(1:15, rep(3, 15))))
Sabor
data.frame(
Sabor =
c(5, 7, 3,
4, 2, 6,
5, 3, 6,
5, 6, 0,
7, 4, 0,
7, 7, 0,
6, 6, 0,
4, 6, 1,
6, 4, 0,
7, 7, 0,
2, 4, 0,
5, 7, 4,
7, 5, 0,
4, 5, 0,
6, 6, 3
),
Tipo = factor(rep(c("A", "B", "C"), 15)),
Provador = factor(rep(1:15, rep(3, 15))))
tapply(chocolate$Sabor, chocolate$Tipo, mean)
chocolate<- data.frame(
Sabor =
c(5, 7, 3,
4, 2, 6,
5, 3, 6,
5, 6, 0,
7, 4, 0,
7, 7, 0,
6, 6, 0,
4, 6, 1,
6, 4, 0,
7, 7, 0,
2, 4, 0,
5, 7, 4,
7, 5, 0,
4, 5, 0,
6, 6, 3
),
Tipo = factor(rep(c("A", "B", "C"), 15)),
Provador = factor(rep(1:15, rep(3, 15))))
tapply(chocolate$Sabor, chocolate$Tipo, mean)
chocolate
ajuste <- lm(chocolate$Sabor ~ chocolate$Tipo + chocolate$Provador)
summary(ajuste)
anova(ajuste)
chocolate
a1 <- aov(chocolate$Sabor ~ chocolate$Tipo + chocolate$Provador)
a1
?aov
summary(a1)
posthoc <- TukeyHSD(x=a1, 'chocolate$Tipo', conf.level=0.95)
posthoc
plot(a1)
library(agricolae)
install.packages("agricolae")
library(agricolae)
HSD.test(ajuste, 'chocolate$Tipo')
HSD.test(ajuste, 'chocolate$Tipo')
?HSD.test
a2<- HSD.test(ajuste, 'chocolate$Tipo')
?HSD.test
a2
summary(a2)
dir()
gapCleaned<- read.csv("../Tutorials-and-Practice-scripts/gapC.csv", header = TRUE, stringsAsFactors = FALSE)
dim(gapCleaned)
head(gapCleaned)
dim(gapCleaned)
means<- round(tapply(gapCleaned$breastcancer, gapCleaned$continent, mean), digits=2)  # note that I I round values to just 2 decimal places
means
gapCleaned$breastcancer
gapCleaned$continent
means
library(gplots)
?gplots
plotmeans(gapCleaned$breastcancer~gapCleaned$continent, digits=2, ccol=”red”, mean.labels=T, main=”Plot of breast cancer means by continent”)
plotmeans(gapCleaned$breastcancer~gapCleaned$continent, digits=2, ccol="red", mean.labels=T, main="Plot of breast cancer means by continent")
boxplot(gapCleaned$breastcancer ~ gapCleaned$continent, main="Breast cancer by continent (mean is black dot)", xlab="continents", ylab="new cases per 100,00 residents", col=rainbow(7))
points(means, col="black", pch=18)
warnings()
boxplot(gapCleaned$breastcancer ~ gapCleaned$continent, main="Breast cancer by continent (mean is black dot)", xlab="continents", ylab="new cases per 100,00 residents", col=rainbow(7))
points(means, col="black", pch=18)
aov_cont<- aov(gapCleaned$breastcancer ~ gapCleaned$continent)
summary(aov_cont) # here I see results for my ANOVA test
tuk<- TukeyHSD(aov_cont)
tuk
tuk$`gapCleaned$continent`
tuk$`gapCleaned$continent`[,4]
plot(tuk)
test_lapply[[2]][,6]
test_lapply[[2]][,5]
aov_cont<- aov(test_lapply[[2]]$cibersort_LM22 ~ test_lapply[[2]][,6])
summary(aov_cont) # here I see results for my ANOVA test
explanatory_varibale<-test_lapply[[2]][,6]
explanatory_varibale
class(explanatory_varibale)
explanatory_varibale<-as.factor(test_lapply[[2]][,6])
class(explanatory_varibale)
explanatory_variable<-as.factor(test_lapply[[2]][,6])
aov_cont<- aov(test_lapply[[2]]$cibersort_LM22 ~ explanatory_variable)
summary(aov_cont) # here I see results for my ANOVA test
unique(test_lapply[[2]]$cell_type)
test_lapply[[2]][1:70, 1:5]
newtable<- test_lapply[[2]] %>%
dplyr:filter(cell_type == "Activated dendritic cell")
newtable<- test_lapply[[2]] %>%
dplyr::filter(cell_type == "Activated dendritic cell")
aov_cont<- aov(newtable$cibersort_LM22 ~ newtable[,6])
summary(aov_cont) # here I see results for my ANOVA test
aov_cont<- aov(newtable$cibersort_LM22 ~ newtable[,6])
summary(aov_cont) # here I see results for my ANOVA test
newtable
dim(newtable)
tuk<- TukeyHSD(aov_cont)
aov_cont<- aov(newtable$cibersort_LM22 ~ newtable[,6])
summary(aov_cont) # here I see results for my ANOVA test
aov_cont<- aov(test_lapply[[2]]$cibersort_LM22 ~ as.factor(newtable[,6]))
aov_cont<- aov(newtable$cibersort_LM22 ~ as.factor(newtable[,6]))
summary(aov_cont) # here I see results for my ANOVA test
aov_cont<- aov(newtable$cibersort_LM22 ~ newtable[,6])
summary(aov_cont) # here I see results for my ANOVA test
aov_cont<- aov(newtable$cibersort_LM22 ~ as.factor(newtable[,6]))
summary(aov_cont) # here I see results for my ANOVA test
tuk<- TukeyHSD(aov_cont)
tuk
plot(tuk)
table(newtable[,6])
means<- round(tapply(newtable$cibersort_LM22 ~ as.factor(newtable[,6]), mean), digits=2)  # note that I I round values to just 2 decimal places
as.factor(newtable[,6]
)
newtable$cibersort_LM22
means<- round(tapply(newtable$cibersort_LM22 ~ as.factor(newtable[,6]), mean), digits=2)  # note that I I round values to just 2 decimal places
means<- round(tapply(newtable$cibersort_LM22 ~ newtable[,6], mean), digits=2)  # note that I I round values to just 2 decimal places
means<- round(tapply(newtable$cibersort_LM22 ~ newtable$SLC24A2, mean), digits=2)  # note that I I round values to just 2 decimal places
newtable$cibersort_LM22
length(newtable$cibersort_LM22)
newtable$SLC24A2
length(newtable$SLC24A2)
class(newtable$cibersort_LM22)
?mean
means<- round(tapply(newtable$cibersort_LM22 ~ newtable$SLC24A2, mean, na.rm = TRUE), digits=2)  # note that I I round values to just 2 decimal places
means<- round(tapply(newtable$cibersort_LM22 ~ newtable$SLC24A2, FUN = mean), digits=2)  # note that I I round values to just 2 decimal places
means<- round(tapply(newtable$cibersort_LM22 ~ as.factor(newtable[,6]), FUN = mean), digits=2)  # note that I I round values to just 2 decimal places
?ave
means<- round(tapply(gapCleaned$breastcancer, gapCleaned$continent, mean), digits=2)  # note that I I round values to just 2 decimal places
means
means<- tapply(gapCleaned$breastcancer, gapCleaned$continent, mean)  # note that I I round values to just 2 decimal places
means
means<- round(tapply(newtable$cibersort_LM22, as.factor(newtable[,6]), mean), digits=2)  # note that I I round values to just 2 decimal places
means
newtable$cibersort_LM22
means<- round(tapply(newtable$cibersort_LM22, as.factor(newtable[,6]), mean), digits=4)  # note that I I round values to just 2 decimal places
means
