lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,11], type = "o", pch = 1, col = colours[10])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,12], type = "o", pch = 1, col = colours[11])
dim(pc.weight.proportion.true)
for (j in 1:10){
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- pc.weight.compared[1:pairs,j]
pc.weight.proportion.true[i,j+1]<-sum(distance<= threshold)/pairs
pc.weight.proportion.true[i,1]<-pairs
}
}
pc.weight.proportion.true
dim(pc.weight.compared)
pc.weight.proportion.true<- data.frame(matrix(NA, ncol = 11, nrow = 19))
dim(pc.weight.proportion.true)
for (j in 1:10){
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- pc.weight.compared[1:pairs,j]
pc.weight.proportion.true[i,j+1]<-sum(distance<= threshold)/pairs
pc.weight.proportion.true[i,1]<-pairs
}
}
pc.weight.proportion.true
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(11, alpha = 0.5)
colours
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
colours<- rainbow(11, alpha = 0.5)
colours
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
head(theta.proportion.true)
head(theta.proportion.true, 10)
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
nrow(lac.di.scores.compared)
laci.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
number.of.pairs
laci.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
laci.table
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table[i,2]<-sum(distance<= threshold)/pairs
laci.table[i,1]<-pairs
}
laci.table
nrow(cadh.di.scores.compared)
cadh.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
cadh.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
cadh.table
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table[i,2]<-sum(distance<= threshold)/pairs
cadh.table[i,1]<-pairs
}
cadh.table
colour<- rainbow(3, s = 0.6, v = 0.75)
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], xlim = c(0,1))
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], cadh.table[,2], type = "o", pch = 1, col = colour[3])
legend("topright",
c("DHFR","LACI","CADH"),
lty=c(1,1), pch=c(1,1),
lwd=c(1,1),col=c(colours),
bty = "n", cex = 1.0)
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], cadh.table[,2], type = "o", pch = 1, col = colour[3])
legend("topright",
c("DHFR","LACI","CADH"),
lty=c(1,1), pch=c(1,1),
lwd=c(1,1),col=c(colour),
bty = "n", cex = 1.0)
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
laci.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table2[i,2]<-sum(distance<= threshold)/pairs
laci.table2[i,1]<-pairs
}
laci.table2
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
laci.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table3[i,2]<-sum(distance<= threshold)/pairs
laci.table3[i,1]<-pairs
}
laci.table3
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], laci.table3[,2], type = "o", pch = 1, col = colour[2])
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table3[i,2]<-sum(distance<= threshold)/pairs
cadh.table3[i,1]<-pairs
}
cadh.table3
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table3[,2], type = "o", pch = 1, col = colour[3])
source('~/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/Set up R session.R', echo=TRUE)
threshold_CNV_all_table_loc[1:2, 1:12]
list.CNV.all.table.co.del<-lapply(c(seq(1:22), "X"), function(x) co.deletion_co.amplification_matrix(threshold_CNV_all_table_loc, column_start = 11, threshold = -1,Chromosome = x,
deletion = TRUE, normalisation = "tumours.with.event"))
plot_heatmap<-function(x){
tiff(paste("Chromosome_", x, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(target.gene)
}
getwd()
length(list.CNV.all.table.co.del)
names(list.CNV.all.table.co.del)
list.CNV.all.table.co.del[[1]][1:2, 1:12]
list.CNV.all.table.co.del[[1]][1:6, 1:12]
plot_heatmap<-function(x){
tiff(paste("Chromosome_", x, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(target.gene)
}
lapply(list.CNV.all.table.co.del[[1]], function(x) plot_heatmap(x))
dev.off()
lapply(list.CNV.all.table.co.del[[1]], function(x) plot_heatmap(x))
lapply(list.CNV.all.table.co.del[1], function(x) plot_heatmap(x))
dev.off()
plot_heatmap<-function(x){
tiff(paste("Chromosome_", x, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
plot_data<- list.CNV.all.table.co.del[x]
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(x)
}
plot_heatmap<-function(x){
tiff(paste("Chromosome_", x, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
plot_data<- list.CNV.all.table.co.del[x]
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(x)
}
lapply(1, function(x) plot_heatmap(x))
lapply(c(1), function(x) plot_heatmap(x))
names(list.CNV.all.table.co.del)<- c(seq(1:22), "X")
names(list.CNV.all.table.co.del)
names(list.CNV.all.table.co.del[1])
plot_heatmap<-function(x){
tiff(paste("Chromosome_", names(x), "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(names(x))
}
tiff(paste("Chromosome_", names(x), "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
plot_heatmap<-function(x){
tiff(paste("Chromosome_", names(x), "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(names(x))
}
names(list.CNV.all.table.co.del[1])
list.CNV.all.table.co.del[1]
plot_heatmap<-function(x){
tiff(paste("Chromosome_", names(x), "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(names(x))
}
lapply(list.CNV.all.table.co.del[9], function(x) plot_heatmap(x))
names(x)
names(list.CNV.all.table.co.del[1])
plot_heatmap<-function(x){
tiff(paste("Chromosome_", names[x], "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(names[x])
}
lapply(list.CNV.all.table.co.del[9], function(x) plot_heatmap(x))
names(list.CNV.all.table.co.del)
plot_heatmap<-function(x){
tiff(paste("Chromosome_", x, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(x)
}
lapply(names(names(list.CNV.all.table.co.del), function(x) plot_heatmap(list.CNV.all.table.co.del[[x]])))
lapply(c("9"), function(x) plot_heatmap(list.CNV.all.table.co.del[[x]]))
x<-9
list.CNV.all.table.co.del[[x]]
plot_heatmap<-function(x){
tiff(paste("Chromosome_", x, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(x,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(x)
}
lapply(c("9"), function(x) plot_heatmap(list.CNV.all.table.co.del[[x]]))
names(list.CNV.all.table.co.del)
names(list.CNV.all.table.co.del[9])
lapply(names(list.CNV.all.table.co.del[9]), function(x) plot_heatmap(list.CNV.all.table.co.del[[x]]))
length(list.CNV.all.table.co.del)
i=1
chromosome<- names(names(list.CNV.all.table.co.del)[i])
chromosome
chromosome<- names(list.CNV.all.table.co.del[i])
chromosome
chromosome
i=9
chromosome<- names(list.CNV.all.table.co.del[i])
plot_data<- list.CNV.all.table.co.del[[i]]
chromosome
dim(plot_data)
tiff(paste("Chromosome_", chromosome, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(i)
for (i in 1:length(list.CNV.all.table.co.del)){
chromosome<- names(list.CNV.all.table.co.del[i])
plot_data<- list.CNV.all.table.co.del[[i]]
tiff(paste("Chromosome_", chromosome, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(i)
}
list.CNV.all.table.co.del<-lapply(c(seq(1:22), "X"), function(x) co.deletion_co.amplification_matrix(threshold_CNV_all_table_loc, column_start = 11, threshold = -2,Chromosome = x,
deletion = TRUE, normalisation = "tumours.with.event"))
length(list.CNV.all.table.co.del)
names(list.CNV.all.table.co.del)<- c(seq(1:22), "X")
names(list.CNV.all.table.co.del)
for (i in 1:length(list.CNV.all.table.co.amp)){
chromosome<- names(list.CNV.all.table.co.amp[i])
plot_data<- list.CNV.all.table.co.amp[[i]]
tiff(paste("Chromosome_", chromosome, "_deletion = FALSE.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(i)
}
names(list.CNV.all.table.co.del)
for (i in 1:length(list.CNV.all.table.co.del)){
chromosome<- names(list.CNV.all.table.co.del[i])
plot_data<- list.CNV.all.table.co.del[[i]]
tiff(paste("Chromosome_", chromosome, "_deletion = true.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(i)
}
list.CNV.all.table.co.amp<-lapply(c(seq(1:22), "X"), function(x) co.deletion_co.amplification_matrix(threshold_CNV_all_table_loc,
column_start = 11, threshold = 2,Chromosome = x, deletion = FALSE, normalisation = "tumours.with.event"))
names(list.CNV.all.table.co.amp)<- c(seq(1:22), "X")
names(list.CNV.all.table.co.amp)
for (i in 1:length(list.CNV.all.table.co.amp)){
chromosome<- names(list.CNV.all.table.co.amp[i])
plot_data<- list.CNV.all.table.co.amp[[i]]
tiff(paste("Chromosome_", chromosome, "_deletion = FALSE.tiff", sep =""), width = 25, height = 22, units = 'in', res = 100)
pheatmap(plot_data,
cluster_row = F,
cluster_cols = F,
show_rownames = FALSE,
show_colnames = FALSE
)
dev.off()
print(i)
}
