is.null(ncol(dfCov)
)
fittedSurv <- survfit(surv~dfCov[,1]+dfCov[,2], na.action = na.exclude)
fittedSurv$strata
df.categ <- melt(fittedSurv$strata)
df.categ
?melt()
df.categ$name <- rownames(df.categ)
df.categ$name
df.categ
categNames <- apply(df.categ, 1, function(x) paste0(x[1]," (",x[2],")"))
categNames
class(categNames)
categNames[1]
!is.null(ncol(dfCov))
categNames
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 1\\]",colnames(dfCov)[1],x))
categNames
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 2\\]",colnames(dfCov)[2],x))
categNames
categNames[1]
plot(fittedSurv, main=plotTitle,
xlab="Time (days)", ylab=ylabel,
col=brewer.pal(9,"Set1"), mark.time=T)
legend("topright", legend=categNames,
col=brewer.pal(9,"Set1"),
lwd=2, cex=0.9)
performSurvivalAnalysis <- function(surv,dfCov,plotTitle="",ylabel="Overall survival") {
if (is.null(ncol(dfCov))) {
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
df.categ <- cbind(sapply(names(fittedSurv$strata), function(x) strsplit(x,"=")[[1]][2]),
fittedSurv$n)
df.categ <- data.frame(df.categ)
} else {
fittedSurv <- survfit(surv~dfCov[,1]+dfCov[,2], na.action = na.exclude)
df.categ <- melt(fittedSurv$strata)
df.categ$name <- rownames(df.categ)
}
categNames <- apply(df.categ, 1, function(x) paste0(x[1]," (",x[2],")"))
if (!is.null(ncol(dfCov))) {
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 1\\]",colnames(dfCov)[1],x))
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 2\\]",colnames(dfCov)[2],x))
}
plot(fittedSurv, main=plotTitle,
xlab="Time (days)", ylab=ylabel,
col=brewer.pal(9,"Set1"), mark.time=T)
legend("topright", legend=categNames,
col=brewer.pal(9,"Set1"),
lwd=2, cex=0.9)
print("Chi-sq test:")
if (is.null(ncol(dfCov))) {
print(survdiff(surv~dfCov,rho = 0))
} else {
print(survdiff(surv~dfCov[,1]+dfCov[,2],rho = 0))
}
print("Cox PH test:")
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
text(1000,0,labels=paste0("HR=",round(exp(summary(coxfit)$coefficients[1]),2),"; p=",
round(summary(coxfit)$logtest[3],3)))
}
load("../../Input data/From Maria/survival example/dat.example.RData")
dat.example <- dat.example[which(!is.na(dat.example$OS.days)),]
dat.example$OSsurvObj <- with(dat.example, Surv(OS.days, AliveDead==1))
performSurvivalAnalysis(dat.example$OSsurvObj,dat.example$Sex,
plotTitle = "Survival by sex")
performSurvivalAnalysis(dat.example$OSsurvObj,dat.example[,c("Sex","Tstage.EarlyLate")],
plotTitle = "Survival by sex and T stage")
surv <- with(clinical_survival_deletion_category, Surv(new_death, death_event==1))
surv
dfCov<- clinical_survival_deletion_category$deletion_category
plot_graph = TRUE
surv <- with(clinical_survival_deletion_category, Surv(new_death, death_event==1))
surv
dfCov<- clinical_survival_deletion_category$deletion_category
plot_graph = TRUE
target_gene<- gene_information[[2]][1]
target_gene
target_gene<- gene_information[[2]][[1]]
target_gene<- gene_information_list[[2]][[1]]
target_gene
test4
test4[,1]
test4[1,]
test4[[1]][,1:3]
x<- test4[[2]]
x
dim(x)
nrow(x)
survival_stats<- as.data.frame(matrix(NA, ncol = 4, nrow = nrow(x)))
dim(survival_stats)
surv <- with(clinical_survival_deletion_category, Surv(new_death, death_event==1))
surv
dfCov<- clinical_survival_deletion_category$deletion_category
dfCov
is.null(ncol(dfCov)
)
if (is.null(ncol(dfCov))) {
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
df.categ <- cbind(sapply(names(fittedSurv$strata), function(x) strsplit(x,"=")[[1]][2]),
fittedSurv$n)
df.categ <- data.frame(df.categ)
} else {
## Fit Kaplain meier graph to More than one co-varaible:
fittedSurv <- survfit(surv~dfCov[,1]+dfCov[,2], na.action = na.exclude)
df.categ <- melt(fittedSurv$strata)
df.categ$name <- rownames(df.categ)
}
categNames <- apply(df.categ, 1, function(x) paste0(x[1]," (",x[2],")"))
categNames
!is.null(ncol(dfCov)
)
plot_graph = TRUE
plot_graph == TRUE
if (plot_graph == TRUE) {
plot(fittedSurv, main=plotTitle,
xlab="Time (days)", ylab=ylabel,
col=brewer.pal(9,"Set1"), mark.time=T)
legend("topright", legend=categNames,
col=brewer.pal(9,"Set1"),
lwd=2, cex=0.9)
}
print("Chi-sq test:")
if (is.null(ncol(dfCov))) {
print(survdiff(surv~dfCov,rho = 0))
} else {
print(survdiff(surv~dfCov[,1]+dfCov[,2],rho = 0))
}
print("Cox PH test:")
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
survival_stats<- as.data.frame(matrix(NA, ncol = 4, nrow = 1))
dim(survival_stats)
survival_stats
survival_stats<- rep(NA, 4)
dim(survival_stats)
length(survival_stats)
survival_stats[1]<- target_gene
survival_stats
print("Chi-sq test:")
if (is.null(ncol(dfCov))) {
print(survdiff(surv~dfCov,rho = 0))
} else {
print(survdiff(surv~dfCov[,1]+dfCov[,2],rho = 0))
}
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
round(exp(summary(coxfit)$coefficients[1]),2)
print("Cox PH test:")
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
round(exp(summary(coxfit)$coefficients[1]),2)
summary(coxfit)$coefficients[1]
summary(coxfit)$coefficients[2]
round(summary(coxfit)$coefficients[2],2)
summary(coxfit)
a<-summary(coxfit)
a$loglik
str(a)
round(summary(coxfit)$logtest[2],2)
round(summary(coxfit)$logtest[3],2)
survival_stats[3]<- round(summary(coxfit)$waldtest[3],2)
round(summary(coxfit)$waldtest[3],2)
print(summary(coxph(surv~dfCov)))
str(a)
print(summary(coxph(surv~dfCov)))
str(a)
round(summary(coxfit)$sctest[3],2)
proximal_gene<- "MTAP"
survival_stats<- rep(NA, 8)
length(survival_stats)
print(summary(coxph(surv~dfCov), print.rmean=TRUE))
print(summary(coxph(surv~dfCov)))
print("Kaplan-meier:")
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude, print.rmean=TRUE)
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude, print.rmean=TRUE)
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
print(survfit(Surv(new_death, event = death_event == 1)~deletion_category, data = clinical_survival_deletion_c
fittedSurv
str(fittedSurv)
?survfit
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude, rmean=getOption('survfit.rmean'))
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
summary(fittedSurv)
summary_fittedSurv<- summary(fittedSurv, rmean=getOption('survfit.rmean'))
summary_fittedSurv
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
summary_fittedSurv<- summary(fittedSurv, rmean=getOption('survfit.rmean'))
summary_fittedSurv
print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean
fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean
?print
survival:::survmean(fittedSurv, rmean=60)
survival:::survmean(fittedSurv, rmean=max(x$))
x
max_survival<- max(clinical_survival_deletion_category$death_days)
survival:::survmean(fittedSurv, rmean=max_survival)
max_survival<- max(clinical_survival_deletion_category$death_days)
max_survival<- max(clinical_survival_deletion_category$death_days)
max_survival<- max(clinical_survival_deletion_category$death_days)
survival:::survmean(fittedSurv, rmean=max_survival)
max_survival
max_survival<- max(clinical_survival_deletion_category$death_days, na.rm = T)
max_survival
survival:::survmean(fittedSurv, rmean=max_survival)
fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
summary(fittedSurv)
print(fittedSurv, print.rmean=TRUE)
b<-print(fittedSurv, print.rmean=TRUE)
b
invisible( b<-print(fittedSurv, print.rmean=TRUE))
b
?
Calculate Mean Survival Time
The mean survival time will in general depend on what value is chosen for the maximum survival time. You can get the restricted mean survival time with print(km, print.rmean=TRUE). By default, this assumes that the longest survival time is equal to the longest survival time in the data. You can set this to a different value by adding an rmean argument (e.g., print(km, print.rmean=TRUE, rmean=250)).
Extract Value of Mean Survival Time and Store in an Object
In response to your comment: I initially figured one could extract the mean survival time by looking at the object returned by print(km, print.rmean=TRUE), but it turns out that print.survfit doesn't return a list object but just returns text to the console.
Instead, I looked through the code of print.survfit (you can see the code by typing getAnywhere(print.survfit) in the console) to see where the mean survival time is calculated. It turns out that a function called survmean takes care of this, but it's not an exported function, meaning R won't recognize the function when you try to run it like a "normal" function. So, to access the function, you need to run the code below (where you need to set rmean explicitly):
survival:::survmean(km, rmean=60)
You'll see that the function returns a list where the first element is a matrix with several named values, including the mean and the standard error of the mean. So, to extract, for example, the mean survival time, you would do:
survival:::survmean(km, rmean=60) [[1]]["*rmean"]
Details on How the Mean Survival Time is Calculated
The help for print.survfit provides details on the options and how the restricted mean is calculated:
?print.survfit
?print.survfit
fittedSurv_mean<- print(fittedSurv, rmean=TRUE)
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude, rmean=TRUE)
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean<- print(fittedSurv, rmean = getOption('survfit.rmean'))
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude, rmean = getOption('survfit.rmean'))
survival:::survmean(fittedSurv, rmean="individual")
fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
survival:::survmean(fittedSurv, rmean="common")
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
fittedSurv_mean<- survival:::survmean(fittedSurv, rmean="individual")
fittedSurv_mean
if (is.null(ncol(dfCov))) {
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
#fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean<- survival:::survmean(fittedSurv, rmean="individual")
#survival:::survmean(fittedSurv, rmean="common")
df.categ <- cbind(sapply(names(fittedSurv$strata), function(x) strsplit(x,"=")[[1]][2]),
fittedSurv$n)
df.categ <- data.frame(df.categ)
} else {
## Fit Kaplain meier graph to More than one co-varaible:
fittedSurv <- survfit(surv~dfCov[,1]+dfCov[,2], na.action = na.exclude)
df.categ <- melt(fittedSurv$strata)
df.categ$name <- rownames(df.categ)
}
categNames <- apply(df.categ, 1, function(x) paste0(x[1]," (",x[2],")"))
if (!is.null(ncol(dfCov))) {
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 1\\]",colnames(dfCov)[1],x))
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 2\\]",colnames(dfCov)[2],x))
}
print("Chi-sq test:")
if (is.null(ncol(dfCov))) {
print(survdiff(surv~dfCov,rho = 0))
} else {
print(survdiff(surv~dfCov[,1]+dfCov[,2],rho = 0))
}
print("Cox PH test:")
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
survival_stats[1]<- target_gene
survival_stats[2]<- proximal_gene
survival_stats[3]<- round(summary(coxfit)$logtest[3],2)
survival_stats[4]<- round(summary(coxfit)$waldtest[3],2)
survival_stats[5]<- round(summary(coxfit)$sctest[3],2)
survival_stats[6]<- round(summary(coxfit)$coefficients[2],2)
fittedSurv_mean
fittedSurv_mean$matrix
fittedSurv_mean$matrix[,5]
a<- fittedSurv_mean$matrix[,5]
a
class(a)
survival_stats[7]<- a #mean
paste(a, sep = "")
a
a
paste(a, sep = " ", collapse = T)
paste(a, sep = " ", collapse = T)
a<- as.character(a)
a
paste(a, sep = " ", collapse = T)
a[1]
paste(a, collapse = T)
paste(a, collapse = " ")
a<- fittedSurv_mean$matrix[,5]
paste(a, collapse = " ")
a<- fittedSurv_mean$matrix[,5]
fittedSurv_mean$matrix[,5]
survival_stats[7]<- paste(fittedSurv_mean$matrix[,5], collapse = " ") #mean
fittedSurv_mean$matrix[,5]survival_stats[7]
survival_stats[7]
fittedSurv_mean
fittedSurv_mean$matrix[,3]
survival_stats[1]<- target_gene
survival_stats[2]<- proximal_gene
survival_stats[3]<- round(summary(coxfit)$logtest[3],2)
survival_stats[4]<- round(summary(coxfit)$waldtest[3],2)
survival_stats[5]<- round(summary(coxfit)$sctest[3],2)
survival_stats[6]<- round(summary(coxfit)$coefficients[2],2)
survival_stats[7]<- paste(fittedSurv_mean$matrix[,5], collapse = " ") #mean
survival_stats[8]<-  paste(fittedSurv_mean$matrix[,3], collapse = " ")
survival_stats
print(summary(coxph(surv~dfCov)))
colnames(survival_stats)<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
survival_stats
c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
colnames(survival_stats)<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
survival_stats
length(survival_stats)
colnames(survival_stats)
colnames(survival_stats)<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
colnames(survival_stats)<- c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
a<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
a
length(a)
names(survival_stats)<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
survival_stats
performSurvivalAnalysis <- function(surv,dfCov,plotTitle="",ylabel="Overall survival", plot_graph = FALSE, target_gene) {
##Create empty vector to store stats
survival_stats<- rep(NA, 8)
##Fit Kaplain meier graph to one co-variable to compare data with :
if (is.null(ncol(dfCov))) {
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
#fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean<- survival:::survmean(fittedSurv, rmean="individual")
#survival:::survmean(fittedSurv, rmean="common")
df.categ <- cbind(sapply(names(fittedSurv$strata), function(x) strsplit(x,"=")[[1]][2]),
fittedSurv$n)
df.categ <- data.frame(df.categ)
} else {
## Fit Kaplain meier graph to More than one co-varaible:
fittedSurv <- survfit(surv~dfCov[,1]+dfCov[,2], na.action = na.exclude)
df.categ <- melt(fittedSurv$strata)
df.categ$name <- rownames(df.categ)
}
##Get category names for one variable
categNames <- apply(df.categ, 1, function(x) paste0(x[1]," (",x[2],")"))
if (!is.null(ncol(dfCov))) {
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 1\\]",colnames(dfCov)[1],x))
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 2\\]",colnames(dfCov)[2],x))
}
if (plot_graph == TRUE) {
plot(fittedSurv, main=plotTitle,
xlab="Time (days)", ylab=ylabel,
col=brewer.pal(9,"Set1"), mark.time=T)
legend("topright", legend=categNames,
col=brewer.pal(9,"Set1"),
lwd=2, cex=0.9)
}
print("Chi-sq test:")
if (is.null(ncol(dfCov))) {
print(survdiff(surv~dfCov,rho = 0))
} else {
print(survdiff(surv~dfCov[,1]+dfCov[,2],rho = 0))
}
print("Cox PH test:")
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
# print("Kaplan-meier:")
# if (is.null(ncol(dfCov))) {
#   print(summary(coxph(surv~dfCov)))
#   coxfit <- coxph(surv~dfCov)
# } else {
#   print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
#   coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
# }
if (plot_graph == TRUE) {
text(1000,0,labels=paste0("HR=",round(exp(summary(coxfit)$coefficients[1]),2),"; p=",
round(summary(coxfit)$logtest[3],3)))
}
survival_stats[1]<- target_gene
survival_stats[2]<- proximal_gene
survival_stats[3]<- round(summary(coxfit)$logtest[3],2)
survival_stats[4]<- round(summary(coxfit)$waldtest[3],2)
survival_stats[5]<- round(summary(coxfit)$sctest[3],2)
survival_stats[6]<- round(summary(coxfit)$coefficients[2],2)
survival_stats[7]<- paste(fittedSurv_mean$matrix[,5], collapse = " ") #mean
survival_stats[8]<-  paste(fittedSurv_mean$matrix[,3], collapse = " ")
names(survival_stats)<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
survival_stats
}
performSurvivalAnalysis(surv,dfCov, plotTitle="title", ,ylabel="Overall survival", plot_graph = FALSE, target_gene )
target_gene
performSurvivalAnalysis(surv,dfCov, plotTitle="title", ,ylabel="Overall survival", plot_graph = FALSE, target_gene = target_gene )
performSurvivalAnalysis(surv,dfCov, plotTitle="title",ylabel="Overall survival", plot_graph = FALSE, target_gene = target_gene )
performSurvivalAnalysis <- function(surv,dfCov,plotTitle="",ylabel="Overall survival", plot_graph = FALSE, target_gene) {
##Create empty vector to store stats
survival_stats<- rep(NA, 8)
##Fit Kaplain meier graph to one co-variable to compare data with :
if (is.null(ncol(dfCov))) {
fittedSurv <- survfit(surv~dfCov, na.action = na.exclude)
#fittedSurv_mean<- print(fittedSurv, print.rmean=TRUE)
fittedSurv_mean<- survival:::survmean(fittedSurv, rmean="individual")
#survival:::survmean(fittedSurv, rmean="common")
df.categ <- cbind(sapply(names(fittedSurv$strata), function(x) strsplit(x,"=")[[1]][2]),
fittedSurv$n)
df.categ <- data.frame(df.categ)
} else {
## Fit Kaplain meier graph to More than one co-varaible:
fittedSurv <- survfit(surv~dfCov[,1]+dfCov[,2], na.action = na.exclude)
df.categ <- melt(fittedSurv$strata)
df.categ$name <- rownames(df.categ)
}
##Get category names for one variable
categNames <- apply(df.categ, 1, function(x) paste0(x[1]," (",x[2],")"))
if (!is.null(ncol(dfCov))) {
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 1\\]",colnames(dfCov)[1],x))
categNames <- sapply(categNames, function(x) gsub("dfCov\\[, 2\\]",colnames(dfCov)[2],x))
}
if (plot_graph == TRUE) {
plot(fittedSurv, main=plotTitle,
xlab="Time (days)", ylab=ylabel,
col=brewer.pal(9,"Set1"), mark.time=T)
legend("topright", legend=categNames,
col=brewer.pal(9,"Set1"),
lwd=2, cex=0.9)
}
print("Chi-sq test:")
if (is.null(ncol(dfCov))) {
print(survdiff(surv~dfCov,rho = 0))
} else {
print(survdiff(surv~dfCov[,1]+dfCov[,2],rho = 0))
}
print("Cox PH test:")
if (is.null(ncol(dfCov))) {
print(summary(coxph(surv~dfCov)))
coxfit <- coxph(surv~dfCov)
} else {
print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
}
# print("Kaplan-meier:")
# if (is.null(ncol(dfCov))) {
#   print(summary(coxph(surv~dfCov)))
#   coxfit <- coxph(surv~dfCov)
# } else {
#   print(summary(coxph(surv~dfCov[,1]+dfCov[,2])))
#   coxfit <- coxph(surv~dfCov[,1]+dfCov[,2])
# }
if (plot_graph == TRUE) {
text(1000,0,labels=paste0("HR=",round(exp(summary(coxfit)$coefficients[1]),2),"; p=",
round(summary(coxfit)$logtest[3],3)))
}
survival_stats[1]<- target_gene
survival_stats[2]<- proximal_gene
survival_stats[3]<- round(summary(coxfit)$logtest[3],2)
survival_stats[4]<- round(summary(coxfit)$waldtest[3],2)
survival_stats[5]<- round(summary(coxfit)$sctest[3],2)
survival_stats[6]<- round(summary(coxfit)$coefficients[2],2)
survival_stats[7]<- paste(fittedSurv_mean$matrix[,5], collapse = " ") #mean
survival_stats[8]<-  paste(fittedSurv_mean$matrix[,3], collapse = " ")
names(survival_stats)<-c("target_gene", "proximal_gene", "p-value_Likelihood_ratio_test",
"p-value_Wald_test", "p-value_logrank_test", "Hazard_ratio", "mean_survival",
"number_of_samples_per_category")
return(survival_stats)
}
performSurvivalAnalysis(surv,dfCov, plotTitle="title",ylabel="Overall survival", plot_graph = FALSE, target_gene = target_gene )
