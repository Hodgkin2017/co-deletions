cadh.table2
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
laci.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table2[i,2]<-sum(distance<= threshold)/pairs
laci.table2[i,1]<-pairs
}
laci.table2
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
laci.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table3[i,2]<-sum(distance<= threshold)/pairs
laci.table3[i,1]<-pairs
}
laci.table3
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], laci.table3[,2], type = "o", pch = 1, col = colour[2])
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table3[i,2]<-sum(distance<= threshold)/pairs
cadh.table3[i,1]<-pairs
}
cadh.table3
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table3[,2], type = "o", pch = 1, col = colour[3])
source('~/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/Set up R session.R', echo=TRUE)
target_genes<- c("MET", "CDKN2A", "RB1", "WWOX",
"LRP1B", "PDE4D", "CCNE1", "TP53",
"FGFR1", "MYC", "EGFR","WHSC1L1",
"ERBB2", "MCL1", "MDM2", "CCND1", "ATM",
"NOTCH1", "PPP2R2A", "BRD4", "ARID1A",
"STK11", "PARK2")
cnv.table<- threshold_short_cnv_list_loc[[1]]
create_target_gene_information_list<- function(cnv_table, target_genes){
## Create an empty list to store gene information
gene_information_list<- vector("list", length(target_genes))
##loop to create list of genes and their start and stop locations
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
}
return(gene_information_list)
}
gene_information_list<- create_target_gene_information_list(cnv_table = cnv.table, target_genes = target_genes)
gene_information_list[[4]]
gene_information_list
distance_from_target_gene_function<- function(cnv.table, gene_information, distance){
##Get end site of genes 2.5MB away of 5' start site of target gene
end_sites_5prime_genes<- cnv.table %>%
dplyr::filter(CHR == gene_information[[2]]) %>%
dplyr::filter(start <= gene_information[[4]], start >=  gene_information[[4]] - distance) %>%
dplyr::select(end)
##Calculate the distances between genes
distance_5prime_genes<- gene_information[[4]] - end_sites_5prime_genes
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
distance_5prime_genes[distance_5prime_genes < 0]<- 0
##Get start site of genes 2.5MB away of 3' end of end of target gene
start_sites_3prime_genes<-cnv.table %>%
dplyr::filter(CHR == gene_information[[2]]) %>%
dplyr::filter(start > gene_information[[4]], end <= gene_information[[5]] + distance ) %>%
dplyr::select(start)
##calculate the distance to the end of the genes 5' of the start of the target gene.
distance_3prime_genes<- start_sites_3prime_genes - gene_information[[5]]
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
if (nrow(distance_3prime_genes) == 0){
}else {
distance_3prime_genes[distance_3prime_genes < 0]<- 0
}
##Make sure both tables have same colnames
colnames(distance_5prime_genes)<- "start"
## Join data together
distance_from_target_gene<- rbind(distance_5prime_genes, distance_3prime_genes)
return(distance_from_target_gene)
}
distance_from_target_gene_function(cnv.table = cnv.table, gene_information = gene_information_list[[1]], distance = 2.5e+06)
intergene_distance_matrix_function<- function(cnv.table, chromosome){
##Get start location for chromosome of choice
selected.genes.start<- cnv.table %>%
dplyr::filter(CHR == chromosome) %>%
dplyr::select(start)
##Calculate pairwise distances between gene start sites
intergene.distance.table <- data.frame(matrix(NA, ncol = nrow(selected.genes.start), nrow = nrow(selected.genes.start)))
for (j in 1:nrow(selected.genes.start)) {
intergene.distance.table[,j]<- abs(selected.genes.start[,1] - selected.genes.start[j,1])
}
##Get gene names and use to name matrix rows and columns
Gene_Symbol<- cnv.table %>%
dplyr::filter(CHR == chromosome) %>%
dplyr::select(Gene.Symbol) %>%
t() %>% #required to convert output from data.frame to vector
as.character()
colnames(intergene.distance.table)<- Gene_Symbol
rownames(intergene.distance.table)<- Gene_Symbol
return(intergene.distance.table)
}
chromosome_9_intergene_distance<- intergene_distance_matrix_function(cnv.table = cnv.table, chromosome = 9)
dim(chromosome_9_intergene_distance)
chromosome_9_intergene_distance
distance_from_target_gene_co_deletion_co_amplification_function<- function(cnv.table, gene_information_list,
distance = 2.5e+06,
deletion = TRUE,
threshold = -2,
compare_all_genes = FALSE,
normalisation = "tumours.with.event",
column_start = 11){
############
### Create a long datafame of co-deletions 2.5MB upstream and downstream of gene of interest.
##Create co-deletion matricies for each target gene
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table = cnv.table, column_start = column_start, threshold = threshold, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = deletion, normalisation = normalisation))
##Add gene name to each column to be used with gather function later
co.deletion.per.target.gene<- lapply(co.deletion.per.target.gene, function(x) as.data.frame(cbind(Gene.Symbol.row = rownames(x), x)))
##Create a long 3 column wide table with pair-wise proportion of pair wise deletions
gathered<- lapply(co.deletion.per.target.gene, function(x) tidyr::gather(x, Gene.Symbol.col,proportion, 2:ncol(x)))
##Keep rows relating to MET v's all genes only and not all genes v's all genes
if (compare_all_genes == FALSE){
gathered_target_genes<- vector("list", length(target_genes))
for(i in 1: length(target_genes)){
gene<- target_genes[[i]][1]
gathered_target_genes[[i]]<- gathered[[i]] %>%
dplyr::filter(Gene.Symbol.col == gene)
}
} else if (compare_all_genes == TRUE){
gathered_target_genes<- gathered
}
##Bind all dataframes in list together
gathered.co.deletion.per.target.gene<- do.call(rbind, gathered_target_genes)
############
### Create a dataframe of gene distances from gene of interest.
if (compare_all_genes == FALSE){
distance_from_target_gene_table<- lapply(gene_information_list, function(x) distance_from_target_gene_function(cnv.table = cnv.table, gene_information = x, distance = distance))
##Bind all dataframes in list together
distance_between_genes_table<- do.call(rbind, distance_from_target_gene_table)
} else if (compare_all_genes == TRUE){
intergene_distance_table_function<- function(cnv.table, gene_information, distance){
selected_genes_start<- cnv.table %>%
dplyr::filter(CHR == gene_information[[2]]) %>%
dplyr::filter(start >=  gene_information[[4]] - distance, end <= gene_information[[5]] + distance ) %>%
dplyr::select(start)
intergene_distance_table <- data.frame(matrix(NA, ncol = nrow(selected_genes_start), nrow = nrow(selected_genes_start)))
for (j in 1:nrow(selected_genes_start)) {
intergene_distance_table[,j]<- abs(selected_genes_start[,1] - selected_genes_start[j,1])
}
Gene_Symbol<- cnv.table %>%
dplyr::filter(CHR == gene_information[[2]]) %>%
dplyr::filter(start >=  gene_information[[4]] - distance, end <= gene_information[[5]] + distance ) %>%
dplyr::select(Gene.Symbol) %>%
t() %>% #required to convert output from data.frame to vector
as.character()
colnames(intergene_distance_table)<- Gene_Symbol
rownames(intergene_distance_table)<- Gene_Symbol
return(intergene_distance_table)
}
intergene_distance_table<- lapply(gene_information_list, function(x) intergene_distance_table_function(cnv.table = cnv.table, gene_information = x, distance = distance))
##Add gene name to each column to be used with gather function later
intergene_distance_table<- lapply(intergene_distance_table, function(x) as.data.frame(cbind(Gene.Symbol.row = rownames(x), x)))
##Add target gene to each column to be used with gather function later
for (i in 1: length(gene_information_list)){
intergene_distance_table[[i]]<- cbind(gene_information_list[[i]][[1]], intergene_distance_table[[i]])
}
#intergene_distance_table<- lapply(intergene_distance_table, function(x) as.data.frame(cbind(Target_gene = (x), x)))
##Create a long 3 column wide table with pair-wise proportion of pair wise deletions
gathered<- lapply(intergene_distance_table, function(x) tidyr::gather(x, Gene.Symbol.col,proportion, 3:ncol(x)))
##Bind all dataframes in list together
distance_between_genes_table<- do.call(rbind, gathered)
}
###########
### join pair-wise distance table to pair-wise proportion of co-deletions table:
if (compare_all_genes == FALSE){
co_deletions_distance_from_target_gene_plot_table<- cbind(proportion_of_co_deletion = gathered.co.deletion.per.target.gene, distance_from_target_gene = distance_between_genes_table)
colnames(co_deletions_distance_from_target_gene_plot_table)<- c("Comparison_gene", "Target_gene", "proportion_co_del_amp", "distance_from_target_genes")
} else if (compare_all_genes == TRUE) {
co_deletions_distance_from_target_gene_plot_table<- cbind(distance_from_target_gene = distance_between_genes_table, proportion_of_co_deletion = gathered.co.deletion.per.target.gene)
colnames(co_deletions_distance_from_target_gene_plot_table)<- c("Target_gene", "Comparison_gene1", "Comparison_gene2", "distance", "Comparison_gene1_again", "Comparison_gene2_again", "proportion_of_co_deletion")
}
return(co_deletions_distance_from_target_gene_plot_table)
}
test<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event")
dim(test)
head(test)
tail(test)
test2<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = TRUE, normalisation = "tumours.with.event")
dim(test2)
head(test2)
tail(test2)
head(test2)
tail(test2)
co_deletions_distance_from_target_gene_plot_table
dim(co_deletions_distance_from_target_gene_plot_table)
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,], aes(Comparison_gene, as.numeric(proportion_co_del_amp))) +
geom_bar(stat = "identity", aes(fill = Target_gene)) +
facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,],
aes(Comparison_gene, as.numeric(proportion_co_del_amp), colour = Target_gene)) +
geom_line(stat = "identity", aes(group = Target_gene)) +
facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,],
aes(Comparison_gene, as.numeric(proportion_co_del_amp), colour = Target_gene)) +
geom_point(size = 0.5, shape = 1) +
#geom_area(aes(fill=Target_gene)) +
geom_line(stat = "identity", aes(group = Target_gene)) +
facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,],
aes(Comparison_gene, as.numeric(proportion_co_del_amp), colour = Target_gene)) +
geom_area(mapping = aes(x = ), fill=Target_gene)
mean_co_deletion_co_amplification_values_around_gene<- function(co_deletion_table,
distance_from_gene_to_calculate_mean){
n<- distance_from_gene_to_calculate_mean
result<-rep(NA, nrow(co_deletion_table))
for(i in 1: nrow(co_deletion_table)){
if(i < n){
start<- i
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if((i >= n) & (i+n-1 < ncol(co_deletion_table))) {
start<- i-n
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if(i+n > ncol(co_deletion_table)) {
start<- i-n
end<- ncol(co_deletion_table)
result[i]<- mean(co_deletion_table[i, start:end])
}
}
return(result)
}
mean_co_deletion_co_amplification_values_around_gene(dummydata, 1)
dummydata2<-data.frame(Comparison_gene = as.factor(letters[1:8]), Target_gene = rep(c("b", "g"), c(4,4)), proportion_co_del_amp = c(1.5, 2.2, 3.7, 5.2, 3.2, 1.2, 4.3, 3.9))
dummydata2
ggplot(dummydata2, aes(Comparison_gene, as.numeric(proportion_co_del_amp))) +
geom_bar(stat = "identity", aes(fill = Target_gene)) +
facet_wrap(~Target_gene, scales = "free_x")
mean_co_deletion_co_amplification_values_around_gene<- function(co_deletion_table,
distance_from_gene_to_calculate_mean){
n<- distance_from_gene_to_calculate_mean
result<-rep(NA, nrow(co_deletion_table))
for(i in 1: nrow(co_deletion_table)){
if(i < n){
start<- i
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if((i >= n) & (i+n-1 < ncol(co_deletion_table))) {
start<- i-n
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if(i+n > ncol(co_deletion_table)) {
start<- i-n
end<- ncol(co_deletion_table)
result[i]<- mean(co_deletion_table[i, start:end])
}
}
return(result)
}
mean_co_deletion_co_amplification_values_around_gene(dummydata, 1)
mean_co_deletion_co_amplification_values_around_gene(dummydata, 2)
mean_co_deletion_co_amplification_values_around_gene(dummydata2, 1)
mean_co_deletion_co_amplification_values_around_gene(dummydata2, 2)
dummydata2
mean_co_deletion_co_amplification_values_around_gene<- function(co_deletion_table,
distance_from_gene_to_calculate_mean){
n<- distance_from_gene_to_calculate_mean
result<-rep(NA, nrow(co_deletion_table))
for(i in 1: nrow(co_deletion_table)){
if(i < n){
start<- i
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if((i >= n) & (i+n-1 < ncol(co_deletion_table))) {
start<- i-n
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if(i+n > ncol(co_deletion_table)) {
start<- i-n
end<- ncol(co_deletion_table)
result[i]<- mean(co_deletion_table[i, start:end])
}
}
return(result)
}
distance<- 2.5e+06
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table, column_start = 11, threshold = -2, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = TRUE, normalisation = "tumours.with.event"))
length(co.deletion.per.target.gene)
co.deletion.per.target.gene[[2]]
test<- mean_co_deletion_co_amplification_values_around_gene(co.deletion.per.target.gene[[2]], 1)
test
co_deletion_around_target_gene<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,1))
length(co_deletion_around_target_gene)
co_deletion_around_target_gene[[2]]
identical(test, co_deletion_around_target_gene[[2]])
co_deletion_around_target_gene2<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,2))
length(co_deletion_around_target_gene2)
co_deletion_around_target_gene2[[2]]
co_deletion_around_target_gene<- unlist(co_deletion_around_target_gene)
co_deletion_around_target_gene
co_deletion_around_target_gene2<- unlist(co_deletion_around_target_gene2)
co_deletion_around_target_gene2
length(co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
co_deletions_distance_from_target_gene_plot_table<- cbind(co_deletions_distance_from_target_gene_plot_table, co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
head(co_deletions_distance_from_target_gene_plot_table)
tail(co_deletions_distance_from_target_gene_plot_table)
distance<- 2.5e+06
gene_information_list
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table, column_start = 11, threshold = -2, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = TRUE, normalisation = "tumours.with.event"))
length(co.deletion.per.target.gene)
co.deletion.per.target.gene[[2]]
co_deletion_around_target_gene<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,1))
length(co_deletion_around_target_gene)
co_deletion_around_target_gene[[2]]
identical(test, co_deletion_around_target_gene[[2]])
co_deletion_around_target_gene2<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,2))
length(co_deletion_around_target_gene2)
co_deletion_around_target_gene2[[2]]
co_deletion_around_target_gene<- unlist(co_deletion_around_target_gene)
co_deletion_around_target_gene
co_deletion_around_target_gene2<- unlist(co_deletion_around_target_gene2)
co_deletion_around_target_gene2
length(co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
distance<- 2.5e+06
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table, column_start = 11, threshold = -2, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = TRUE, normalisation = "tumours.with.event"))
length(co.deletion.per.target.gene)
co.deletion.per.target.gene[[2]]
test<- mean_co_deletion_co_amplification_values_around_gene(co.deletion.per.target.gene[[2]], 1)
test
dim(test)
test
length(test)
dim(co.deletion.per.target.gene[[2]])
co_deletion_around_target_gene<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,1))
length(co_deletion_around_target_gene)
co_deletion_around_target_gene[[2]]
lapply(co_deletion_around_target_gene, function(x length(x)))
lapply(co_deletion_around_target_gene, function(x) length(x))
sapply(co_deletion_around_target_gene, function(x) length(x))
sapply(co.deletion.per.target.gene, function(x) nrow(x))
co_deletion_around_target_gene2<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,2))
length(co_deletion_around_target_gene2)
co_deletion_around_target_gene2[[2]]
co_deletion_around_target_gene<- unlist(co_deletion_around_target_gene)
co_deletion_around_target_gene
co_deletion_around_target_gene2<- unlist(co_deletion_around_target_gene2)
co_deletion_around_target_gene2
length(co_deletion_around_target_gene)
co_deletions_distance_from_target_gene_plot_table
test<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event")
dim(test)
test
head(test)
co_deletions_distance_from_target_gene_plot_table<- readRDS(file = "temp.data.rds")
dim(co_deletions_distance_from_target_gene_plot_table)
length(co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
co_deletions_distance_from_target_gene_plot_table<- cbind(co_deletions_distance_from_target_gene_plot_table, co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
head(co_deletions_distance_from_target_gene_plot_table)
tail(co_deletions_distance_from_target_gene_plot_table)
co_deletions_distance_from_target_gene_plot_table<- cbind(co_deletions_distance_from_target_gene_plot_table, co_deletion_around_target_gene2)
ggplot(co_deletions_distance_from_target_gene_plot_table, aes(x=Comparison_gene, group = Target_gene)) +
geom_point(aes(y = as.numeric(proportion_co_del_amp), colour = "Co-deletion with target gene"), size = 0.5, shape = 1) +
geom_line(aes(y = as.numeric(proportion_co_del_amp), colour = "Co-deletion with target gene")) +
geom_point(aes(y = as.numeric(co_deletion_around_target_gene), colour = "Mean co-deletion for genes 1 gene away"), size = 0.5, shape = 1) +
geom_line(aes(y = as.numeric(co_deletion_around_target_gene), colour = "Mean co-deletion for genes 1 gene away")) +
#facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
facet_wrap(~Target_gene, scales = "free_x") +
#theme(legend.position="none") +
theme(legend.position="bottom") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
co_deletions_distance_from_target_gene_plot_table_new<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event")
dim(co_deletions_distance_from_target_gene_plot_table_new)
ggplot(co_deletions_distance_from_target_gene_plot_table_new, aes(x=Comparison_gene, group = Target_gene)) +
geom_point(aes(y = as.numeric(proportion_co_del_amp), colour = "Co-deletion with target gene"), size = 0.5, shape = 1) +
geom_line(aes(y = as.numeric(proportion_co_del_amp), colour = "Co-deletion with target gene")) +
geom_point(aes(y = as.numeric(co_deletion_around_target_gene), colour = "Mean co-deletion for genes 1 gene away"), size = 0.5, shape = 1) +
geom_line(aes(y = as.numeric(co_deletion_around_target_gene), colour = "Mean co-deletion for genes 1 gene away")) +
#facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
facet_wrap(~Target_gene, scales = "free_x") +
#theme(legend.position="none") +
theme(legend.position="bottom") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
head(co_deletions_distance_from_target_gene_plot_table_new)
co_deletions_distance_from_target_gene_plot_table<- readRDS(file = "temp.data.rds")
test<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event")
identical(test, co_deletions_distance_from_target_gene_plot_table )
co_deletions_distance_from_target_gene_plot_table<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event")
dim(co_deletions_distance_from_target_gene_plot_table)
head(co_deletions_distance_from_target_gene_plot_table)
tail(co_deletions_distance_from_target_gene_plot_table)
class(co_deletions_distance_from_target_gene_plot_table$proportion_co_del_amp)
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,], aes(Comparison_gene, as.numeric(proportion_co_del_amp))) +
geom_bar(stat = "identity", aes(fill = Target_gene)) +
facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,],
aes(Comparison_gene, as.numeric(proportion_co_del_amp), colour = Target_gene)) +
geom_line(stat = "identity", aes(group = Target_gene)) +
facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
ggplot(co_deletions_distance_from_target_gene_plot_table[1:100,],
aes(Comparison_gene, as.numeric(proportion_co_del_amp), colour = Target_gene)) +
geom_point(size = 0.5, shape = 1) +
#geom_area(aes(fill=Target_gene)) +
geom_line(stat = "identity", aes(group = Target_gene)) +
facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
theme(legend.position="none") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
mean_co_deletion_co_amplification_values_around_gene<- function(co_deletion_table,
distance_from_gene_to_calculate_mean){
n<- distance_from_gene_to_calculate_mean
result<-rep(NA, nrow(co_deletion_table))
for(i in 1: nrow(co_deletion_table)){
if(i < n){
start<- i
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if((i >= n) & (i+n-1 < ncol(co_deletion_table))) {
start<- i-n
end<- i+n
result[i]<- mean(co_deletion_table[i, start:end])
} else if(i+n > ncol(co_deletion_table)) {
start<- i-n
end<- ncol(co_deletion_table)
result[i]<- mean(co_deletion_table[i, start:end])
}
}
return(result)
}
distance<- 2.5e+06
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table, column_start = 11, threshold = -2, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = TRUE, normalisation = "tumours.with.event"))
length(co.deletion.per.target.gene)
co.deletion.per.target.gene[[2]]
test<- mean_co_deletion_co_amplification_values_around_gene(co.deletion.per.target.gene[[2]], 1)
test
length(test)
dim(co.deletion.per.target.gene[[2]])
co_deletion_around_target_gene<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,1))
length(co_deletion_around_target_gene)
co_deletion_around_target_gene[[2]]
identical(test, co_deletion_around_target_gene[[2]])
co_deletion_around_target_gene2<- lapply(co.deletion.per.target.gene, function(x) mean_co_deletion_co_amplification_values_around_gene(x,2))
length(co_deletion_around_target_gene2)
co_deletion_around_target_gene2[[2]]
co_deletion_around_target_gene<- unlist(co_deletion_around_target_gene)
co_deletion_around_target_gene
co_deletion_around_target_gene2<- unlist(co_deletion_around_target_gene2)
co_deletion_around_target_gene2
length(co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
co_deletions_distance_from_target_gene_plot_table<- cbind(co_deletions_distance_from_target_gene_plot_table, co_deletion_around_target_gene)
dim(co_deletions_distance_from_target_gene_plot_table)
head(co_deletions_distance_from_target_gene_plot_table)
tail(co_deletions_distance_from_target_gene_plot_table)
co_deletions_distance_from_target_gene_plot_table<- cbind(co_deletions_distance_from_target_gene_plot_table, co_deletion_around_target_gene2)
ggplot(co_deletions_distance_from_target_gene_plot_table, aes(x=Comparison_gene, group = Target_gene)) +
geom_point(aes(y = as.numeric(proportion_co_del_amp), colour = "Co-deletion with target gene"), size = 0.5, shape = 1) +
geom_line(aes(y = as.numeric(proportion_co_del_amp), colour = "Co-deletion with target gene")) +
geom_point(aes(y = as.numeric(co_deletion_around_target_gene), colour = "Mean co-deletion for genes 1 gene away"), size = 0.5, shape = 1) +
geom_line(aes(y = as.numeric(co_deletion_around_target_gene), colour = "Mean co-deletion for genes 1 gene away")) +
#facet_wrap(~Target_gene, nrow = 1, scales = "free_x") +
facet_wrap(~Target_gene, scales = "free_x") +
#theme(legend.position="none") +
theme(legend.position="bottom") +
theme(axis.text.x=element_text(angle=90,hjust=1, vjust = 0.5))
load("~/Documents/Masters_Bioinformatics/Modules/Functional Genomics/Assignment 2 (Functional Genomics)/fga2.RData")
head(Clinical)
head(CNA)
head(Clinical)
head(Exp)
CNA[1:2, 1:10]
CNA[1:2, 1:20]
CNA[1:5, 1:20]
Exp[1:5, 1:20]
