lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(11, alpha = 0.5)
colours
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(theta.proportion.true[,1], theta.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(theta.proportion.true[,1], theta.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(theta.proportion.true[,1], theta.proportion.true[,12], type = "o", pch = 1, col = colours[11])
legend("topright", # places a legend at the appropriate place
c("Theta = 0","Theta = 0.2","Theta = 0.4","Theta = 0.6","Theta = 0.8", "Theta = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours[c(1,2,5,7,9,11)]),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.6) # gives the legend lines the correct color and width
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
colours<- rainbow(11, alpha = 0.5)
colours
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
plot(theta.proportion.true[,1], theta.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(theta.proportion.true[,1], theta.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,4], type = "o", pch = 1, col = colours[2])
lines(theta.proportion.true[,1], theta.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(theta.proportion.true[,1], theta.proportion.true[,6], type = "o", pch = 1, col = colours[5])
head(theta.proportion.true)
head(theta.proportion.true, 10)
colours<- rainbow(10, alpha = 0.5)
colours
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
plot(pc.weight.proportion.true[,1], pc.weight.proportion.true[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colours[1], ylim = c(0,1))
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,3], type = "o", pch = 1, col = colours[2])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,4], type = "o", pch = 1, col = colours[3])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,5], type = "o", pch = 1, col = colours[4])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,6], type = "o", pch = 1, col = colours[5])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,7], type = "o", pch = 1, col = colours[6])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,8], type = "o", pch = 1, col = colours[7])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,9], type = "o", pch = 1, col = colours[8])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,10], type = "o", pch = 1, col = colours[9])
lines(pc.weight.proportion.true[,1], pc.weight.proportion.true[,11], type = "o", pch = 1, col = colours[10])
legend("topright", # places a legend at the appropriate place
c("pc_weight = 0.1","pc_weight = 0.2","pc_weight = 0.3","pc_weight = 0.4","pc_weight = 0.5", "pc_weight = 0.6", "pc_weight = 0.7", "pc_weight = 0.8", "pc_weight = 0.9", "pc_weight = 1.0"), # puts text in the legend
lty=c(1,1), pch=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c(colours),
bty = "n", cex = 0.7) # gives the legend lines the correct color and width
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
nrow(lac.di.scores.compared)
laci.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
number.of.pairs
laci.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
laci.table
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table[i,2]<-sum(distance<= threshold)/pairs
laci.table[i,1]<-pairs
}
laci.table
nrow(cadh.di.scores.compared)
cadh.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
cadh.table<- data.frame(matrix(NA, ncol = 2, nrow = 19))
cadh.table
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table[i,2]<-sum(distance<= threshold)/pairs
cadh.table[i,1]<-pairs
}
cadh.table
colour<- rainbow(3, s = 0.6, v = 0.75)
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], xlim = c(0,1))
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], cadh.table[,2], type = "o", pch = 1, col = colour[3])
legend("topright",
c("DHFR","LACI","CADH"),
lty=c(1,1), pch=c(1,1),
lwd=c(1,1),col=c(colours),
bty = "n", cex = 1.0)
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], question3.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], cadh.table[,2], type = "o", pch = 1, col = colour[3])
legend("topright",
c("DHFR","LACI","CADH"),
lty=c(1,1), pch=c(1,1),
lwd=c(1,1),col=c(colour),
bty = "n", cex = 1.0)
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
laci.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table2[i,2]<-sum(distance<= threshold)/pairs
laci.table2[i,1]<-pairs
}
laci.table2
cadh.table2<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table2[i,2]<-sum(distance<= threshold)/pairs
cadh.table2[i,1]<-pairs
}
cadh.table2
colour<- rainbow(3, s = 0.6, v = 0.75)
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table2[,2], type = "o", pch = 1, col = colour[2])
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lac.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/1JWL/LACI_ECOLI_e40_n2_m40_DIScoresCompared.csv", header = FALSE)
lac.di.scores.compared
laci.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- lac.di.scores.compared[1:pairs,4]
laci.table3[i,2]<-sum(distance<= threshold)/pairs
laci.table3[i,1]<-pairs
}
laci.table3
plot(question3.table[,1], laci.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], laci.table2[,2], type = "o", pch = 1, col = colour[2])
lines(question3.table[,1], laci.table3[,2], type = "o", pch = 1, col = colour[2])
cadh.di.scores.compared<- read.csv("/Users/Matt/Documents/Masters_Bioinformatics/Modules/Structural Biology/Assignment 3/Part C/2O72/CADH1_HUMAN_e3_n2_m40_DIScoresCompared.csv", header = FALSE)
cadh.di.scores.compared
cadh.table3<- data.frame(matrix(NA, ncol = 2, nrow = 19))
for (i in 1:length(number.of.pairs)) {
pairs<-number.of.pairs[i]
distance<- cadh.di.scores.compared[1:pairs,4]
cadh.table3[i,2]<-sum(distance<= threshold)/pairs
cadh.table3[i,1]<-pairs
}
cadh.table3
plot(question3.table[,1], cadh.table[,2], type = "o", pch = 1, xlab = "Number of ranked pairs considered", ylab = "Proportion of contacts accurately predicted", col = colour[1], ylim = c(0,1))
lines(question3.table[,1], cadh.table3[,2], type = "o", pch = 1, col = colour[3])
source('~/Documents/Masters_Bioinformatics/Internships/Code/co-deletions/Set up R session.R', echo=TRUE)
target_genes
gene_information_list
gene_information_list
cnv.table
cnv.table<- threshold_short_cnv_list_loc[[1]]
distance
distance<- 2.5e+06
co.deletion.per.target.gene
co_deletions_distance_from_target_gene_plot_table2<- co_deletions_distance_from_target_gene_plot_table
distance = 2.5e+06
deletion = TRUE
threshold = -2
normalisation = "tumours.with.event"
column_start = 11
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table = cnv.table, column_start = column_start, threshold = threshold, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = deletion, normalisation = normalisation))
co.deletion.per.target.gene<- lapply(co.deletion.per.target.gene, function(x) as.data.frame(cbind(Gene.Symbol.row = rownames(x), x)))
gathered<- lapply(co.deletion.per.target.gene, function(x) tidyr::gather(x, Gene.Symbol.col,proportion, 2:ncol(x)))
compare_all_genes = FALSE
compare_all_genes == FALSE
if (compare_all_genes == FALSE){
gathered_target_genes<- vector("list", length(target_genes))
for(i in 1: length(target_genes)){
gene<- target_genes[[i]][1]
gathered_target_genes[[i]]<- gathered[[i]] %>%
dplyr::filter(Gene.Symbol.col == gene)
}
}
gathered_target_genes
gathered.co.deletion.per.target.gene<- do.call(rbind, gathered_target_genes)
dim(gathered.co.deletion.per.target.gene)
gathered.co.deletion.per.target.gene
gathered.co.deletion.per.target.gene
gene_information_list
distance_from_target_gene_table<- lapply(gene_information_list, function(x) distance_from_target_gene_function(cnv.table = cnv.table, x = x, distance = distance))
distance_from_target_gene_function<- function(cnv.table, x, distance){
##Get start of target gene:
# cnv.table[1:2, 1:12]
#
# x<- gene_information_list[[1]]
#
# x[[4]]
##Get end site of genes 2.5MB away of 5' start site of target gene
end_sites_5prime_genes<- cnv.table %>%
dplyr::filter(CHR == x[[2]]) %>%
dplyr::filter(start <= x[[4]], start >=  x[[4]] - distance) %>%
dplyr::select(end)
# end_sites_5prime_genes
##Calculate the distances between genes
distance_5prime_genes<- x[[4]] - end_sites_5prime_genes
# distance_5prime_genes
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
distance_5prime_genes[distance_5prime_genes < 0]<- 0
##Get the end of the gene
# x[[5]]
##Get start site of genes 2.5MB away of 3' end of end of target gene
start_sites_3prime_genes<-cnv.table %>%
dplyr::filter(CHR == x[[2]]) %>%
dplyr::filter(start > x[[4]], end <= x[[5]] + distance ) %>%
dplyr::select(start)
# start_sites_3prime_genes
##calculate the distance to the end of the genes 5' of the start of the target gene.
distance_3prime_genes<- start_sites_3prime_genes - x[[5]]
# distance_3prime_genes
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
if (nrow(distance_3prime_genes) == 0){
}else {
distance_3prime_genes[distance_3prime_genes < 0]<- 0
}
###combine start and end distance lists and add 0 in place of MET
## Add zero:
# distance_5prime_genes<-rbind(distance_5prime_genes, 0)
# distance_5prime_genes
##Make sure both tables have same colnames
colnames(distance_5prime_genes)<- "start"
## Join data together
distance_from_target_gene<- rbind(distance_5prime_genes, distance_3prime_genes)
# distance_from_target_gene
return(distance_from_target_gene)
}
distance_from_target_gene_function<- function(cnv.table, x, distance){
##Get end site of genes 2.5MB away of 5' start site of target gene
end_sites_5prime_genes<- cnv.table %>%
dplyr::filter(CHR == x[[2]]) %>%
dplyr::filter(start <= x[[4]], start >=  x[[4]] - distance) %>%
dplyr::select(end)
##Calculate the distances between genes
distance_5prime_genes<- x[[4]] - end_sites_5prime_genes
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
distance_5prime_genes[distance_5prime_genes < 0]<- 0
##Get start site of genes 2.5MB away of 3' end of end of target gene
start_sites_3prime_genes<-cnv.table %>%
dplyr::filter(CHR == x[[2]]) %>%
dplyr::filter(start > x[[4]], end <= x[[5]] + distance ) %>%
dplyr::select(start)
##calculate the distance to the end of the genes 5' of the start of the target gene.
distance_3prime_genes<- start_sites_3prime_genes - x[[5]]
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
if (nrow(distance_3prime_genes) == 0){
}else {
distance_3prime_genes[distance_3prime_genes < 0]<- 0
}
##Make sure both tables have same colnames
colnames(distance_5prime_genes)<- "start"
## Join data together
distance_from_target_gene<- rbind(distance_5prime_genes, distance_3prime_genes)
return(distance_from_target_gene)
}
distance_from_target_gene_function<- function(cnv.table, gene_information_list, distance){
##Get end site of genes 2.5MB away of 5' start site of target gene
end_sites_5prime_genes<- cnv.table %>%
dplyr::filter(CHR == gene_information_list[[2]]) %>%
dplyr::filter(start <= gene_information_list[[4]], start >=  gene_information_list[[4]] - distance) %>%
dplyr::select(end)
##Calculate the distances between genes
distance_5prime_genes<- gene_information_list[[4]] - end_sites_5prime_genes
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
distance_5prime_genes[distance_5prime_genes < 0]<- 0
##Get start site of genes 2.5MB away of 3' end of end of target gene
start_sites_3prime_genes<-cnv.table %>%
dplyr::filter(CHR == gene_information_list[[2]]) %>%
dplyr::filter(start > gene_information_list[[4]], end <= gene_information_list[[5]] + distance ) %>%
dplyr::select(start)
##calculate the distance to the end of the genes 5' of the start of the target gene.
distance_3prime_genes<- start_sites_3prime_genes - gene_information_list[[5]]
##Any value <0 = 0 i.e. the gene of interest and any overlapping genes
if (nrow(distance_3prime_genes) == 0){
}else {
distance_3prime_genes[distance_3prime_genes < 0]<- 0
}
##Make sure both tables have same colnames
colnames(distance_5prime_genes)<- "start"
## Join data together
distance_from_target_gene<- rbind(distance_5prime_genes, distance_3prime_genes)
return(distance_from_target_gene)
}
distance_from_target_gene_table<- lapply(gene_information_list, function(x) distance_from_target_gene_function(cnv.table = cnv.table, x = x, distance = distance))
distance_from_target_gene_table<- lapply(gene_information_list, function(x) distance_from_target_gene_function(cnv.table = cnv.table, gene_information_list = x, distance = distance))
distance_from_target_gene_table[[2]]
distance_from_target_gene_table
dim(distance_from_target_gene_table)
distance_from_target_gene_table<- do.call(rbind, distance_from_target_gene_table)
dim(distance_from_target_gene_table)
dim(gathered.co.deletion.per.target.gene)
sapply(co.deletion.per.target.gene, function(x) nrow(x))
co_deletions_distance_from_target_gene_plot_table<- cbind(proportion_of_co_deletion = gathered.co.deletion.per.target.gene, distance_from_target_gene = distance_from_target_gene_table)
head(co_deletions_distance_from_target_gene_plot_table)
tail(co_deletions_distance_from_target_gene_plot_table)
dim(co_deletions_distance_from_target_gene_plot_table)
colnames(co_deletions_distance_from_target_gene_plot_table)<- c("Comparison_gene", "Target_gene", "proportion_co_del_amp", "distance_from_target_genes")
head(co_deletions_distance_from_target_gene_plot_table)
distance_from_target_gene_co_deletion_co_amplification_function<- function(cnv.table, gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event", column_start = 11){
############
### Create a long datafame of co-deletions 2.5MB upstream and downstream of gene of interest.
##Create co-deletion matricies for each target gene
co.deletion.per.target.gene<- lapply(gene_information_list, function(x) co.deletion_co.amplification_matrix(cnv.table = cnv.table, column_start = column_start, threshold = threshold, start = TRUE, Chromosome = x[[2]], selection_criteria = c(x[[4]] - distance, x[[5]] + distance), deletion = deletion, normalisation = normalisation))
##Add gene name to each column to be used with gather function later
co.deletion.per.target.gene<- lapply(co.deletion.per.target.gene, function(x) as.data.frame(cbind(Gene.Symbol.row = rownames(x), x)))
##Create a long 3 column wide table with pair-wise proportion of pair wise deletions
gathered<- lapply(co.deletion.per.target.gene, function(x) tidyr::gather(x, Gene.Symbol.col,proportion, 2:ncol(x)))
##Keep rows relating to MET v's all genes only and not all genes v's all genes
if (compare_all_genes == FALSE){
gathered_target_genes<- vector("list", length(target_genes))
for(i in 1: length(target_genes)){
gene<- target_genes[[i]][1]
gathered_target_genes[[i]]<- gathered[[i]] %>%
dplyr::filter(Gene.Symbol.col == gene)
}
}
##Bind all dataframes in list together
gathered.co.deletion.per.target.gene<- do.call(rbind, gathered_target_genes)
############
### Create a dataframe of gene distances from gene of interest.
distance_from_target_gene_table<- lapply(gene_information_list, function(x) distance_from_target_gene_function(cnv.table = cnv.table, gene_information_list = x, distance = distance))
##Bind all dataframes in list together
distance_from_target_gene_table<- do.call(rbind, distance_from_target_gene_table)
###########
### join pair-wise distance table to pair-wise proportion of co-deletions table:
co_deletions_distance_from_target_gene_plot_table<- cbind(proportion_of_co_deletion = gathered.co.deletion.per.target.gene, distance_from_target_gene = distance_from_target_gene_table)
colnames(co_deletions_distance_from_target_gene_plot_table)<- c("Comparison_gene", "Target_gene", "proportion_co_del_amp", "distance_from_target_genes")
return(co_deletions_distance_from_target_gene_plot_table)
}
test<- distance_from_target_gene_co_deletion_co_amplification_function(cnv.table = cnv.table, gene_information_list = gene_information_list, distance = 2.5e+06, deletion = TRUE, threshold = -2, compare_all_genes = FALSE, normalisation = "tumours.with.event")
dim(test)
identical(test, co_deletions_distance_from_target_gene_plot_table)
head(test)
tail(test)
gene_information_list<- create_target_gene_information_list(cnv.table = cnv.table, target_genes = target_genes)
create_target_gene_information_list<- function(cnv.table, target_genes){
## Create an empty list to store gene information
gene_information_list<- vector("list", length(target_genes))
##loop to create list of genes and their start and stop locations
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
}
}
gene_information_list<- create_target_gene_information_list(cnv.table = cnv.table, target_genes = target_genes)
gene_information_list[[4]][[4]]
gene_information_list
create_target_gene_information_list<- function(cnv.table, target_genes){
## Create an empty list to store gene information
gene_information_list<- vector("list", length(target_genes))
##loop to create list of genes and their start and stop locations
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
return(gene_information_list)
}
}
gene_information_list<- create_target_gene_information_list(cnv.table = cnv.table, target_genes = target_genes)
gene_information_list[[4]][[4]]
create_target_gene_information_list<- function(cnv.table, target_genes){
## Create an empty list to store gene information
gene_information_list<- vector("list", length(target_genes))
##loop to create list of genes and their start and stop locations
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
return(gene_information_list)
}
}
gene_information_list<- create_target_gene_information_list(cnv.table = cnv.table, target_genes = target_genes)
gene_information_list[[4]][[4]]
gene_information_list
cnv.table[1:2, 1:12]
target_genes
gene_information_list<- vector("list", length(target_genes))
length(target_genes)
gene_information_list
i=1
gene<- target_genes[i]
gene
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
return(gene_information_list)
gene_information_list
create_target_gene_information_list<- function(cnv_table, target_genes){
## Create an empty list to store gene information
gene_information_list<- vector("list", length(target_genes))
##loop to create list of genes and their start and stop locations
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
return(gene_information_list)
}
}
gene_information_list<- create_target_gene_information_list(cnv_table = cnv.table, target_genes = target_genes)
gene_information_list[[4]][[4]]
gene_information_list
gene_information_list<- vector("list", length(target_genes))
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
return(gene_information_list)
}
create_target_gene_information_list<- function(cnv_table, target_genes){
## Create an empty list to store gene information
gene_information_list<- vector("list", length(target_genes))
##loop to create list of genes and their start and stop locations
for (i in 1: length(target_genes)){
gene<- target_genes[i]
gene_information<- cnv.table %>%
dplyr::filter(Gene.Symbol == gene) %>%
dplyr::select(Gene.Symbol, CHR, Cytoband, start, end)
gene_information<- as.list(gene_information)
gene_information_list[[i]]<- gene_information
}
return(gene_information_list)
}
gene_information_list<- create_target_gene_information_list(cnv_table = cnv.table, target_genes = target_genes)
gene_information_list[[4]][[4]]
gene_information_list
gene_information_list[[4]]
gene_information_list
